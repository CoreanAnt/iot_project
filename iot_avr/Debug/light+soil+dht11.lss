
light+soil+dht11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00000e1a  00000e8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e1a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000efa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f58  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ad5  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c89  00000000  00000000  00002bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010b8  00000000  00000000  00003846  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  00004900  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000601  00000000  00000000  00004bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000120e  00000000  00000000  000051c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  000063cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e1       	ldi	r30, 0x1A	; 26
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 36       	cpi	r26, 0x6C	; 108
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 43 01 	call	0x286	; 0x286 <main>
  8e:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init_pwm>:
  96:	e0 eb       	ldi	r30, 0xB0	; 176
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	83 62       	ori	r24, 0x23	; 35
  9e:	80 83       	st	Z, r24
  a0:	e1 eb       	ldi	r30, 0xB1	; 177
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	80 83       	st	Z, r24
  aa:	8a b1       	in	r24, 0x0a	; 10
  ac:	88 60       	ori	r24, 0x08	; 8
  ae:	8a b9       	out	0x0a, r24	; 10
  b0:	08 95       	ret

000000b2 <getdata>:
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	00 d0       	rcall	.+0      	; 0xb8 <getdata+0x6>
  b8:	00 d0       	rcall	.+0      	; 0xba <getdata+0x8>
  ba:	1f 92       	push	r1
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	78 2f       	mov	r23, r24
  c2:	fe 01       	movw	r30, r28
  c4:	31 96       	adiw	r30, 0x01	; 1
  c6:	95 e0       	ldi	r25, 0x05	; 5
  c8:	df 01       	movw	r26, r30
  ca:	1d 92       	st	X+, r1
  cc:	9a 95       	dec	r25
  ce:	e9 f7       	brne	.-6      	; 0xca <getdata+0x18>
  d0:	97 b1       	in	r25, 0x07	; 7
  d2:	90 62       	ori	r25, 0x20	; 32
  d4:	97 b9       	out	0x07, r25	; 7
  d6:	98 b1       	in	r25, 0x08	; 8
  d8:	90 62       	ori	r25, 0x20	; 32
  da:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	bf ef       	ldi	r27, 0xFF	; 255
  de:	21 ee       	ldi	r18, 0xE1	; 225
  e0:	84 e0       	ldi	r24, 0x04	; 4
  e2:	b1 50       	subi	r27, 0x01	; 1
  e4:	20 40       	sbci	r18, 0x00	; 0
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <getdata+0x30>
  ea:	00 c0       	rjmp	.+0      	; 0xec <getdata+0x3a>
  ec:	00 00       	nop
  ee:	98 b1       	in	r25, 0x08	; 8
  f0:	9f 7d       	andi	r25, 0xDF	; 223
  f2:	98 b9       	out	0x08, r25	; 8
  f4:	9f ef       	ldi	r25, 0xFF	; 255
  f6:	a0 ee       	ldi	r26, 0xE0	; 224
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	91 50       	subi	r25, 0x01	; 1
  fc:	a0 40       	sbci	r26, 0x00	; 0
  fe:	b0 40       	sbci	r27, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <getdata+0x48>
 102:	00 c0       	rjmp	.+0      	; 0x104 <getdata+0x52>
 104:	00 00       	nop
 106:	98 b1       	in	r25, 0x08	; 8
 108:	90 62       	ori	r25, 0x20	; 32
 10a:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	25 e0       	ldi	r18, 0x05	; 5
 10e:	2a 95       	dec	r18
 110:	f1 f7       	brne	.-4      	; 0x10e <getdata+0x5c>
 112:	00 00       	nop
 114:	97 b1       	in	r25, 0x07	; 7
 116:	9f 7d       	andi	r25, 0xDF	; 223
 118:	97 b9       	out	0x07, r25	; 7
 11a:	80 ed       	ldi	r24, 0xD0	; 208
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <getdata+0x6a>
 120:	35 99       	sbic	0x06, 5	; 6
 122:	5a c0       	rjmp	.+180    	; 0x1d8 <getdata+0x126>
 124:	af e3       	ldi	r26, 0x3F	; 63
 126:	b1 e0       	ldi	r27, 0x01	; 1
 128:	11 97       	sbiw	r26, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <getdata+0x76>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <getdata+0x7c>
 12e:	00 00       	nop
 130:	35 9b       	sbis	0x06, 5	; 6
 132:	54 c0       	rjmp	.+168    	; 0x1dc <getdata+0x12a>
 134:	8f e3       	ldi	r24, 0x3F	; 63
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <getdata+0x86>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <getdata+0x8c>
 13e:	00 00       	nop
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	23 c0       	rjmp	.+70     	; 0x18a <getdata+0xd8>
 144:	35 9b       	sbis	0x06, 5	; 6
 146:	fe cf       	rjmp	.-4      	; 0x144 <getdata+0x92>
 148:	a0 ea       	ldi	r26, 0xA0	; 160
 14a:	aa 95       	dec	r26
 14c:	f1 f7       	brne	.-4      	; 0x14a <getdata+0x98>
 14e:	35 9b       	sbis	0x06, 5	; 6
 150:	0c c0       	rjmp	.+24     	; 0x16a <getdata+0xb8>
 152:	47 e0       	ldi	r20, 0x07	; 7
 154:	50 e0       	ldi	r21, 0x00	; 0
 156:	49 1b       	sub	r20, r25
 158:	51 09       	sbc	r21, r1
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <getdata+0xb2>
 160:	22 0f       	add	r18, r18
 162:	33 1f       	adc	r19, r19
 164:	4a 95       	dec	r20
 166:	e2 f7       	brpl	.-8      	; 0x160 <getdata+0xae>
 168:	62 2b       	or	r22, r18
 16a:	35 99       	sbic	0x06, 5	; 6
 16c:	fe cf       	rjmp	.-4      	; 0x16a <getdata+0xb8>
 16e:	9f 5f       	subi	r25, 0xFF	; 255
 170:	02 c0       	rjmp	.+4      	; 0x176 <getdata+0xc4>
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	98 30       	cpi	r25, 0x08	; 8
 178:	28 f3       	brcs	.-54     	; 0x144 <getdata+0x92>
 17a:	e1 e0       	ldi	r30, 0x01	; 1
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	ec 0f       	add	r30, r28
 180:	fd 1f       	adc	r31, r29
 182:	e8 0f       	add	r30, r24
 184:	f1 1d       	adc	r31, r1
 186:	60 83       	st	Z, r22
 188:	8f 5f       	subi	r24, 0xFF	; 255
 18a:	85 30       	cpi	r24, 0x05	; 5
 18c:	90 f3       	brcs	.-28     	; 0x172 <getdata+0xc0>
 18e:	87 b1       	in	r24, 0x07	; 7
 190:	80 62       	ori	r24, 0x20	; 32
 192:	87 b9       	out	0x07, r24	; 7
 194:	88 b1       	in	r24, 0x08	; 8
 196:	80 62       	ori	r24, 0x20	; 32
 198:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	bf ef       	ldi	r27, 0xFF	; 255
 19c:	21 ee       	ldi	r18, 0xE1	; 225
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	b1 50       	subi	r27, 0x01	; 1
 1a2:	20 40       	sbci	r18, 0x00	; 0
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <getdata+0xee>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <getdata+0xf8>
 1aa:	00 00       	nop
 1ac:	99 81       	ldd	r25, Y+1	; 0x01
 1ae:	2a 81       	ldd	r18, Y+2	; 0x02
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	29 0f       	add	r18, r25
 1b4:	31 1d       	adc	r19, r1
 1b6:	8b 81       	ldd	r24, Y+3	; 0x03
 1b8:	28 0f       	add	r18, r24
 1ba:	31 1d       	adc	r19, r1
 1bc:	4c 81       	ldd	r20, Y+4	; 0x04
 1be:	24 0f       	add	r18, r20
 1c0:	31 1d       	adc	r19, r1
 1c2:	4d 81       	ldd	r20, Y+5	; 0x05
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	24 17       	cp	r18, r20
 1c8:	35 07       	cpc	r19, r21
 1ca:	51 f4       	brne	.+20     	; 0x1e0 <getdata+0x12e>
 1cc:	77 23       	and	r23, r23
 1ce:	59 f0       	breq	.+22     	; 0x1e6 <getdata+0x134>
 1d0:	71 30       	cpi	r23, 0x01	; 1
 1d2:	41 f0       	breq	.+16     	; 0x1e4 <getdata+0x132>
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	07 c0       	rjmp	.+14     	; 0x1e6 <getdata+0x134>
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <getdata+0x134>
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <getdata+0x134>
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <getdata+0x134>
 1e4:	89 2f       	mov	r24, r25
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <dht11_getdata>:
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	eb 01       	movw	r28, r22
 1fc:	0e 94 59 00 	call	0xb2	; 0xb2 <getdata>
 200:	8f 3f       	cpi	r24, 0xFF	; 255
 202:	09 f0       	breq	.+2      	; 0x206 <dht11_getdata+0x10>
 204:	88 83       	st	Y, r24
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <PWM_init>:
	
	//	데이터가 들어오지 않았다면 while문 반복
	while ( !( UCSR0A & 0x20 ) );	//	5번째 bit를 사용
	
	//	데이터를 전송
	UDR0 = c;
 20c:	84 b1       	in	r24, 0x04	; 4
 20e:	82 61       	ori	r24, 0x12	; 18
 210:	84 b9       	out	0x04, r24	; 4
 212:	e0 eb       	ldi	r30, 0xB0	; 176
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	83 68       	ori	r24, 0x83	; 131
 21a:	80 83       	st	Z, r24
 21c:	e1 eb       	ldi	r30, 0xB1	; 177
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	84 60       	ori	r24, 0x04	; 4
 224:	80 83       	st	Z, r24
 226:	08 95       	ret

00000228 <ReadADC1>:
 228:	83 e4       	ldi	r24, 0x43	; 67
 22a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 22e:	ea e7       	ldi	r30, 0x7A	; 122
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	80 64       	ori	r24, 0x40	; 64
 236:	80 83       	st	Z, r24
 238:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 23c:	86 fd       	sbrc	r24, 6
 23e:	fc cf       	rjmp	.-8      	; 0x238 <ReadADC1+0x10>
 240:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 244:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 248:	08 95       	ret

0000024a <ReadADC2>:
 24a:	84 e4       	ldi	r24, 0x44	; 68
 24c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 250:	ea e7       	ldi	r30, 0x7A	; 122
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	80 64       	ori	r24, 0x40	; 64
 258:	80 83       	st	Z, r24
 25a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 25e:	86 fd       	sbrc	r24, 6
 260:	fc cf       	rjmp	.-8      	; 0x25a <ReadADC2+0x10>
 262:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 266:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 26a:	08 95       	ret

0000026c <Puts0>:
}

/*	문자열을 전송하는 함수	*/
void Puts0(char* str)
{
 26c:	fc 01       	movw	r30, r24
	while(*str)
 26e:	07 c0       	rjmp	.+14     	; 0x27e <Puts0+0x12>
	{
		while(!(UCSR0A & (1 << UDRE0)));
 270:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 274:	95 ff       	sbrs	r25, 5
 276:	fc cf       	rjmp	.-8      	; 0x270 <Puts0+0x4>
		UDR0 = *str++;
 278:	31 96       	adiw	r30, 0x01	; 1
 27a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}

/*	문자열을 전송하는 함수	*/
void Puts0(char* str)
{
	while(*str)
 27e:	80 81       	ld	r24, Z
 280:	81 11       	cpse	r24, r1
 282:	f6 cf       	rjmp	.-20     	; 0x270 <Puts0+0x4>
	{
		while(!(UCSR0A & (1 << UDRE0)));
		UDR0 = *str++;
	}
}
 284:	08 95       	ret

00000286 <main>:
/*	ADC값을 읽어서 리턴하는 함수	*/
unsigned short ReadADC1(void);
unsigned short ReadADC2(void);

int main(void)
{
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	c5 54       	subi	r28, 0x45	; 69
 290:	d1 09       	sbc	r29, r1
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
	ADCSRA |= ( 1 << ADSC );			//	변환시작
	*/
	
	//	위의 설정을 한 번에 처리한 문장이 아래의 두 문장
	
	ADCSRA = 0x87;	//	0x87 = 0b1000 0111
 29c:	87 e8       	ldi	r24, 0x87	; 135
 29e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	
	uint8_t data = 0;
 2a2:	1d 86       	std	Y+13, r1	; 0x0d
	char buf[40] = {0,};
 2a4:	fe 01       	movw	r30, r28
 2a6:	3e 96       	adiw	r30, 0x0e	; 14
 2a8:	88 e2       	ldi	r24, 0x28	; 40
 2aa:	df 01       	movw	r26, r30
 2ac:	1d 92       	st	X+, r1
 2ae:	8a 95       	dec	r24
 2b0:	e9 f7       	brne	.-6      	; 0x2ac <main+0x26>
	USART_Init();
 2b2:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <USART_Init>
	Init_UART0();
 2b6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <Init_UART0>
	
	DDRB = 0xFF;
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 2be:	15 b8       	out	0x05, r1	; 5
	
	DDRD |= (1 << RELAY4_PIN); //1채널 릴레이 모듈 핀을 출력으로 설정
 2c0:	8a b1       	in	r24, 0x0a	; 10
 2c2:	84 60       	ori	r24, 0x04	; 4
 2c4:	8a b9       	out	0x0a, r24	; 10
	
	
	
	
	// 불꽃 감지 센서 모듈 핀을 입력으로 설정
	DDRC &= ~(1 << SENSOR1_PIN);
 2c6:	87 b1       	in	r24, 0x07	; 7
 2c8:	8e 7f       	andi	r24, 0xFE	; 254
 2ca:	87 b9       	out	0x07, r24	; 7
	
	// 내부 풀업 저항 사용
	PORTC |= (1 << SENSOR1_PIN);
 2cc:	88 b1       	in	r24, 0x08	; 8
 2ce:	81 60       	ori	r24, 0x01	; 1
 2d0:	88 b9       	out	0x08, r24	; 8
	

	
	
	// 수위센서 핀을 풀업 모드로 설정
	PORTC |= (1 << SENSOR2_PIN); 
 2d2:	88 b1       	in	r24, 0x08	; 8
 2d4:	82 60       	ori	r24, 0x02	; 2
 2d6:	88 b9       	out	0x08, r24	; 8
	
	
	init();
 2d8:	0e 94 06 03 	call	0x60c	; 0x60c <init>
	
	while (1)
	{
		
		// 불꽃 감지 센서 모듈에서 신호를 감지했는지 확인
		if (PINC & (1 << SENSOR1_PIN))
 2dc:	30 9b       	sbis	0x06, 0	; 6
 2de:	1d c0       	rjmp	.+58     	; 0x31a <main+0x94>
		{
			
			sprintf( p, "fire : 0 \n" ); //불꽃 미감지
 2e0:	8b e0       	ldi	r24, 0x0B	; 11
 2e2:	e1 e0       	ldi	r30, 0x01	; 1
 2e4:	f1 e0       	ldi	r31, 0x01	; 1
 2e6:	de 01       	movw	r26, r28
 2e8:	11 96       	adiw	r26, 0x01	; 1
 2ea:	01 90       	ld	r0, Z+
 2ec:	0d 92       	st	X+, r0
 2ee:	8a 95       	dec	r24
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <main+0x64>
			Puts0( p );
 2f2:	ce 01       	movw	r24, r28
 2f4:	01 96       	adiw	r24, 0x01	; 1
 2f6:	0e 94 36 01 	call	0x26c	; 0x26c <Puts0>
			// 불꽃이 감지되지 않았다면 부저 끄기
			PORTD &= ~(1 << BUZZER_PIN);
 2fa:	8b b1       	in	r24, 0x0b	; 11
 2fc:	87 7f       	andi	r24, 0xF7	; 247
 2fe:	8b b9       	out	0x0b, r24	; 11
			DDRD &= ~(1 << BUZZER_PIN);
 300:	8a b1       	in	r24, 0x0a	; 10
 302:	87 7f       	andi	r24, 0xF7	; 247
 304:	8a b9       	out	0x0a, r24	; 10
 306:	bf ef       	ldi	r27, 0xFF	; 255
 308:	e1 ee       	ldi	r30, 0xE1	; 225
 30a:	f4 e0       	ldi	r31, 0x04	; 4
 30c:	b1 50       	subi	r27, 0x01	; 1
 30e:	e0 40       	sbci	r30, 0x00	; 0
 310:	f0 40       	sbci	r31, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <main+0x86>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0x90>
 316:	00 00       	nop
 318:	0f c0       	rjmp	.+30     	; 0x338 <main+0xb2>
			
			
		}
		else
		{
			sprintf( p, "fire : 1 \n" );  //불꽃감지!
 31a:	8b e0       	ldi	r24, 0x0B	; 11
 31c:	ec e0       	ldi	r30, 0x0C	; 12
 31e:	f1 e0       	ldi	r31, 0x01	; 1
 320:	de 01       	movw	r26, r28
 322:	11 96       	adiw	r26, 0x01	; 1
 324:	01 90       	ld	r0, Z+
 326:	0d 92       	st	X+, r0
 328:	8a 95       	dec	r24
 32a:	e1 f7       	brne	.-8      	; 0x324 <main+0x9e>
			Puts0( p );
 32c:	ce 01       	movw	r24, r28
 32e:	01 96       	adiw	r24, 0x01	; 1
 330:	0e 94 36 01 	call	0x26c	; 0x26c <Puts0>
			// 부저 핀을 출력으로 설정
			init_pwm();
 334:	0e 94 4b 00 	call	0x96	; 0x96 <init_pwm>
			
		}
		
		
		
			dht11_getdata(0, &data);
 338:	be 01       	movw	r22, r28
 33a:	63 5f       	subi	r22, 0xF3	; 243
 33c:	7f 4f       	sbci	r23, 0xFF	; 255
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <dht11_getdata>
			temperature=data;
 344:	8d 85       	ldd	r24, Y+13	; 0x0d
			sprintf(buf, "temperature:%d", temperature); //temperature:
 346:	1f 92       	push	r1
 348:	8f 93       	push	r24
 34a:	87 e1       	ldi	r24, 0x17	; 23
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	9f 93       	push	r25
 350:	8f 93       	push	r24
 352:	8e 01       	movw	r16, r28
 354:	02 5f       	subi	r16, 0xF2	; 242
 356:	1f 4f       	sbci	r17, 0xFF	; 255
 358:	1f 93       	push	r17
 35a:	0f 93       	push	r16
 35c:	0e 94 21 04 	call	0x842	; 0x842 <sprintf>
			strTransmit(buf);
 360:	c8 01       	movw	r24, r16
 362:	0e 94 11 04 	call	0x822	; 0x822 <strTransmit>
			memset(buf, 0x00, 40);
 366:	0f 2e       	mov	r0, r31
 368:	f8 e2       	ldi	r31, 0x28	; 40
 36a:	ff 2e       	mov	r15, r31
 36c:	f0 2d       	mov	r31, r0
 36e:	d8 01       	movw	r26, r16
 370:	ef 2d       	mov	r30, r15
 372:	1d 92       	st	X+, r1
 374:	ea 95       	dec	r30
 376:	e9 f7       	brne	.-6      	; 0x372 <main+0xec>
 378:	ff ef       	ldi	r31, 0xFF	; 255
 37a:	23 ed       	ldi	r18, 0xD3	; 211
 37c:	30 e3       	ldi	r19, 0x30	; 48
 37e:	f1 50       	subi	r31, 0x01	; 1
 380:	20 40       	sbci	r18, 0x00	; 0
 382:	30 40       	sbci	r19, 0x00	; 0
 384:	e1 f7       	brne	.-8      	; 0x37e <main+0xf8>
 386:	00 c0       	rjmp	.+0      	; 0x388 <main+0x102>
 388:	00 00       	nop
			_delay_ms(1000);
	
	
			dht11_getdata(1, &data);
 38a:	be 01       	movw	r22, r28
 38c:	63 5f       	subi	r22, 0xF3	; 243
 38e:	7f 4f       	sbci	r23, 0xFF	; 255
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <dht11_getdata>
			humidity=data;
 396:	8d 85       	ldd	r24, Y+13	; 0x0d
			sprintf(buf, "humidity: %d", humidity); ////humidity:
 398:	1f 92       	push	r1
 39a:	8f 93       	push	r24
 39c:	86 e2       	ldi	r24, 0x26	; 38
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	9f 93       	push	r25
 3a2:	8f 93       	push	r24
 3a4:	1f 93       	push	r17
 3a6:	0f 93       	push	r16
 3a8:	0e 94 21 04 	call	0x842	; 0x842 <sprintf>
			strTransmit(buf);
 3ac:	c8 01       	movw	r24, r16
 3ae:	0e 94 11 04 	call	0x822	; 0x822 <strTransmit>
			memset(buf, 0x00, 40);
 3b2:	d8 01       	movw	r26, r16
 3b4:	1d 92       	st	X+, r1
 3b6:	fa 94       	dec	r15
 3b8:	e9 f7       	brne	.-6      	; 0x3b4 <main+0x12e>
 3ba:	bf ef       	ldi	r27, 0xFF	; 255
 3bc:	e9 e6       	ldi	r30, 0x69	; 105
 3be:	f8 e1       	ldi	r31, 0x18	; 24
 3c0:	b1 50       	subi	r27, 0x01	; 1
 3c2:	e0 40       	sbci	r30, 0x00	; 0
 3c4:	f0 40       	sbci	r31, 0x00	; 0
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <main+0x13a>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <main+0x144>
 3ca:	00 00       	nop
			_delay_ms( 500 );
	
		
			sprintf( p, "light : %d \n", ReadADC1() ); // ADC1의 값을 문자열로 변경. 채널1   //light : 
 3cc:	0e 94 14 01 	call	0x228	; 0x228 <ReadADC1>
 3d0:	9f 93       	push	r25
 3d2:	8f 93       	push	r24
 3d4:	83 e3       	ldi	r24, 0x33	; 51
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	9f 93       	push	r25
 3da:	8f 93       	push	r24
 3dc:	0d 50       	subi	r16, 0x0D	; 13
 3de:	11 09       	sbc	r17, r1
 3e0:	1f 93       	push	r17
 3e2:	0f 93       	push	r16
 3e4:	0e 94 21 04 	call	0x842	; 0x842 <sprintf>
			Puts0( p );
 3e8:	c8 01       	movw	r24, r16
 3ea:	0e 94 36 01 	call	0x26c	; 0x26c <Puts0>
 3ee:	2f ef       	ldi	r18, 0xFF	; 255
 3f0:	33 ed       	ldi	r19, 0xD3	; 211
 3f2:	40 e3       	ldi	r20, 0x30	; 48
 3f4:	21 50       	subi	r18, 0x01	; 1
 3f6:	30 40       	sbci	r19, 0x00	; 0
 3f8:	40 40       	sbci	r20, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0x16e>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0x178>
 3fe:	00 00       	nop
			_delay_ms( 1000 );
	
			sprintf( p, "soil : %d \n", ReadADC2() ); // ADC2의 값을 문자열로 변경. 채널4  //soil : 
 400:	0e 94 25 01 	call	0x24a	; 0x24a <ReadADC2>
 404:	9f 93       	push	r25
 406:	8f 93       	push	r24
 408:	80 e4       	ldi	r24, 0x40	; 64
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	9f 93       	push	r25
 40e:	8f 93       	push	r24
 410:	1f 93       	push	r17
 412:	0f 93       	push	r16
 414:	0e 94 21 04 	call	0x842	; 0x842 <sprintf>
			Puts0( p );
 418:	c8 01       	movw	r24, r16
 41a:	0e 94 36 01 	call	0x26c	; 0x26c <Puts0>
 41e:	8f ef       	ldi	r24, 0xFF	; 255
 420:	93 ed       	ldi	r25, 0xD3	; 211
 422:	a0 e3       	ldi	r26, 0x30	; 48
 424:	81 50       	subi	r24, 0x01	; 1
 426:	90 40       	sbci	r25, 0x00	; 0
 428:	a0 40       	sbci	r26, 0x00	; 0
 42a:	e1 f7       	brne	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42e:	00 00       	nop
			_delay_ms( 1000 );
		
		
		
			//수위센서 관련
			if (!(PINC & (1 << SENSOR2_PIN)))  // 수위센서 핀이 LOW인 경우
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	f8 94       	cli
 434:	de bf       	out	0x3e, r29	; 62
 436:	0f be       	out	0x3f, r0	; 63
 438:	cd bf       	out	0x3d, r28	; 61
 43a:	31 99       	sbic	0x06, 1	; 6
 43c:	4e c0       	rjmp	.+156    	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
			{
				sprintf( p, "water : %d \n",b ); //물이 충분 합니다.
 43e:	1f 92       	push	r1
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	8f 93       	push	r24
 444:	8c e4       	ldi	r24, 0x4C	; 76
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	9f 93       	push	r25
 44a:	8f 93       	push	r24
 44c:	1f 93       	push	r17
 44e:	0f 93       	push	r16
 450:	0e 94 21 04 	call	0x842	; 0x842 <sprintf>
				Puts0( p );
 454:	c8 01       	movw	r24, r16
 456:	0e 94 36 01 	call	0x26c	; 0x26c <Puts0>
 45a:	ff ef       	ldi	r31, 0xFF	; 255
 45c:	29 e6       	ldi	r18, 0x69	; 105
 45e:	38 e1       	ldi	r19, 0x18	; 24
 460:	f1 50       	subi	r31, 0x01	; 1
 462:	20 40       	sbci	r18, 0x00	; 0
 464:	30 40       	sbci	r19, 0x00	; 0
 466:	e1 f7       	brne	.-8      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 468:	00 c0       	rjmp	.+0      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 46a:	00 00       	nop
				_delay_ms( 500 );
				
				if(ReadADC2()<650 )//수중펌프 동작관련
 46c:	0e 94 25 01 	call	0x24a	; 0x24a <ReadADC2>
 470:	0f 90       	pop	r0
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	8a 38       	cpi	r24, 0x8A	; 138
 47e:	92 40       	sbci	r25, 0x02	; 2
 480:	e0 f4       	brcc	.+56     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
				{
					PWM_init(); // Initialize PWM timer
 482:	0e 94 06 01 	call	0x20c	; 0x20c <PWM_init>
					PORTB |= en;
 486:	85 b1       	in	r24, 0x05	; 5
 488:	81 60       	ori	r24, 0x01	; 1
 48a:	85 b9       	out	0x05, r24	; 5
					PORTB &= ~(1 << a1);
 48c:	85 b1       	in	r24, 0x05	; 5
 48e:	8f 7e       	andi	r24, 0xEF	; 239
 490:	85 b9       	out	0x05, r24	; 5
					for(int s=195;s<=255;s+=15)
 492:	83 ec       	ldi	r24, 0xC3	; 195
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0c c0       	rjmp	.+24     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
					{
						OCR2A = s;
 498:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 49c:	af ef       	ldi	r26, 0xFF	; 255
 49e:	b7 ea       	ldi	r27, 0xA7	; 167
 4a0:	e1 e6       	ldi	r30, 0x61	; 97
 4a2:	a1 50       	subi	r26, 0x01	; 1
 4a4:	b0 40       	sbci	r27, 0x00	; 0
 4a6:	e0 40       	sbci	r30, 0x00	; 0
 4a8:	e1 f7       	brne	.-8      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4ac:	00 00       	nop
				if(ReadADC2()<650 )//수중펌프 동작관련
				{
					PWM_init(); // Initialize PWM timer
					PORTB |= en;
					PORTB &= ~(1 << a1);
					for(int s=195;s<=255;s+=15)
 4ae:	0f 96       	adiw	r24, 0x0f	; 15
 4b0:	8f 3f       	cpi	r24, 0xFF	; 255
 4b2:	91 05       	cpc	r25, r1
 4b4:	89 f3       	breq	.-30     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 4b6:	84 f3       	brlt	.-32     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 4b8:	34 c0       	rjmp	.+104    	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
					}
						
					
				}
				
				else if(ReadADC2()>=680)
 4ba:	0e 94 25 01 	call	0x24a	; 0x24a <ReadADC2>
 4be:	88 3a       	cpi	r24, 0xA8	; 168
 4c0:	92 40       	sbci	r25, 0x02	; 2
 4c2:	78 f1       	brcs	.+94     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
				{
					DDRB |= (1 << a1) | (1 << a2);
 4c4:	84 b1       	in	r24, 0x04	; 4
 4c6:	80 61       	ori	r24, 0x10	; 16
 4c8:	84 b9       	out	0x04, r24	; 4
					PWM_init();
 4ca:	0e 94 06 01 	call	0x20c	; 0x20c <PWM_init>
					OCR2A = 0;
 4ce:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
					PORTB &= ~(1 << en);
 4d2:	85 b1       	in	r24, 0x05	; 5
 4d4:	8d 7f       	andi	r24, 0xFD	; 253
 4d6:	85 b9       	out	0x05, r24	; 5
 4d8:	24 c0       	rjmp	.+72     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
				}
			}
			
			else
			{
				sprintf( p, "water : %d \n",a ); //물이 부족합니다.
 4da:	1f 92       	push	r1
 4dc:	1f 92       	push	r1
 4de:	8c e4       	ldi	r24, 0x4C	; 76
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	9f 93       	push	r25
 4e4:	8f 93       	push	r24
 4e6:	8e 01       	movw	r16, r28
 4e8:	0f 5f       	subi	r16, 0xFF	; 255
 4ea:	1f 4f       	sbci	r17, 0xFF	; 255
 4ec:	1f 93       	push	r17
 4ee:	0f 93       	push	r16
 4f0:	0e 94 21 04 	call	0x842	; 0x842 <sprintf>
				Puts0( p );
 4f4:	c8 01       	movw	r24, r16
 4f6:	0e 94 36 01 	call	0x26c	; 0x26c <Puts0>
 4fa:	2f ef       	ldi	r18, 0xFF	; 255
 4fc:	39 e6       	ldi	r19, 0x69	; 105
 4fe:	48 e1       	ldi	r20, 0x18	; 24
 500:	21 50       	subi	r18, 0x01	; 1
 502:	30 40       	sbci	r19, 0x00	; 0
 504:	40 40       	sbci	r20, 0x00	; 0
 506:	e1 f7       	brne	.-8      	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 508:	00 c0       	rjmp	.+0      	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
 50a:	00 00       	nop
				_delay_ms( 500 );
				OCR2A = 0;
 50c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
				PORTB &= ~(1 << en);
 510:	85 b1       	in	r24, 0x05	; 5
 512:	8d 7f       	andi	r24, 0xFD	; 253
 514:	85 b9       	out	0x05, r24	; 5
 516:	0f 90       	pop	r0
 518:	0f 90       	pop	r0
 51a:	0f 90       	pop	r0
 51c:	0f 90       	pop	r0
 51e:	0f 90       	pop	r0
 520:	0f 90       	pop	r0
		
		
		
		
		
			uint8_t pulse_width = read_ir();   //IR센서및 스텝모터 관련
 522:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <read_ir>
 526:	18 2f       	mov	r17, r24
			char buffer[16];
			sprintf(buffer, "Pulse width: %d\r\n", pulse_width);
 528:	1f 92       	push	r1
 52a:	8f 93       	push	r24
 52c:	89 e5       	ldi	r24, 0x59	; 89
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	9f 93       	push	r25
 532:	8f 93       	push	r24
 534:	ce 01       	movw	r24, r28
 536:	c6 96       	adiw	r24, 0x36	; 54
 538:	9f 93       	push	r25
 53a:	8f 93       	push	r24
 53c:	0e 94 21 04 	call	0x842	; 0x842 <sprintf>
			for (int i = 0; buffer[i] != 0; i++)
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	0f 90       	pop	r0
 54a:	0f 90       	pop	r0
 54c:	20 e0       	ldi	r18, 0x00	; 0
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	08 c0       	rjmp	.+16     	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
			{
				while (!(UCSR0A & (1 << UDRE0)));
 552:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 556:	85 ff       	sbrs	r24, 5
 558:	fc cf       	rjmp	.-8      	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
				UDR0 = buffer[i];
 55a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
		
			uint8_t pulse_width = read_ir();   //IR센서및 스텝모터 관련
			char buffer[16];
			sprintf(buffer, "Pulse width: %d\r\n", pulse_width);
			for (int i = 0; buffer[i] != 0; i++)
 55e:	2f 5f       	subi	r18, 0xFF	; 255
 560:	3f 4f       	sbci	r19, 0xFF	; 255
 562:	e6 e3       	ldi	r30, 0x36	; 54
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	ec 0f       	add	r30, r28
 568:	fd 1f       	adc	r31, r29
 56a:	e2 0f       	add	r30, r18
 56c:	f3 1f       	adc	r31, r19
 56e:	90 81       	ld	r25, Z
 570:	91 11       	cpse	r25, r1
 572:	ef cf       	rjmp	.-34     	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
 574:	8f ef       	ldi	r24, 0xFF	; 255
 576:	99 e6       	ldi	r25, 0x69	; 105
 578:	a8 e1       	ldi	r26, 0x18	; 24
 57a:	81 50       	subi	r24, 0x01	; 1
 57c:	90 40       	sbci	r25, 0x00	; 0
 57e:	a0 40       	sbci	r26, 0x00	; 0
 580:	e1 f7       	brne	.-8      	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
 582:	00 c0       	rjmp	.+0      	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
 584:	00 00       	nop
				while (!(UCSR0A & (1 << UDRE0)));
				UDR0 = buffer[i];
			}
			_delay_ms(500);
			
			if (pulse_width > 0 && forward == true)
 586:	11 23       	and	r17, r17
 588:	f9 f0       	breq	.+62     	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
 58a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 58e:	81 11       	cpse	r24, r1
 590:	0f c0       	rjmp	.+30     	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 592:	1a c0       	rjmp	.+52     	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
			{
				for(int i=0; i < 64; i++)
				{
					for(int j=0; j<8;j++)
					{
						step_forward();
 594:	0e 94 12 03 	call	0x624	; 0x624 <step_forward>
			
			if (pulse_width > 0 && forward == true)
			{
				for(int i=0; i < 64; i++)
				{
					for(int j=0; j<8;j++)
 598:	0f 5f       	subi	r16, 0xFF	; 255
 59a:	1f 4f       	sbci	r17, 0xFF	; 255
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
 59e:	00 e0       	ldi	r16, 0x00	; 0
 5a0:	10 e0       	ldi	r17, 0x00	; 0
 5a2:	08 30       	cpi	r16, 0x08	; 8
 5a4:	11 05       	cpc	r17, r1
 5a6:	b4 f3       	brlt	.-20     	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
			}
			_delay_ms(500);
			
			if (pulse_width > 0 && forward == true)
			{
				for(int i=0; i < 64; i++)
 5a8:	bf ef       	ldi	r27, 0xFF	; 255
 5aa:	eb 1a       	sub	r14, r27
 5ac:	fb 0a       	sbc	r15, r27
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <__EEPROM_REGION_LENGTH__+0x1b4>
 5b0:	e1 2c       	mov	r14, r1
 5b2:	f1 2c       	mov	r15, r1
 5b4:	e0 e4       	ldi	r30, 0x40	; 64
 5b6:	ee 16       	cp	r14, r30
 5b8:	f1 04       	cpc	r15, r1
 5ba:	8c f3       	brlt	.-30     	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
					for(int j=0; j<8;j++)
					{
						step_forward();
					}
				}
				PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_2_PIN)| (1 << STEP_3_PIN)| (1 << STEP_4_PIN));
 5bc:	8b b1       	in	r24, 0x0b	; 11
 5be:	8f 70       	andi	r24, 0x0F	; 15
 5c0:	8b b9       	out	0x0b, r24	; 11
				forward = false;
 5c2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 5c6:	8a ce       	rjmp	.-748    	; 0x2dc <main+0x56>
				
			}
			else if(pulse_width > 0 && forward == false)
 5c8:	11 23       	and	r17, r17
 5ca:	09 f4       	brne	.+2      	; 0x5ce <__EEPROM_REGION_LENGTH__+0x1ce>
 5cc:	87 ce       	rjmp	.-754    	; 0x2dc <main+0x56>
 5ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5d2:	81 11       	cpse	r24, r1
 5d4:	83 ce       	rjmp	.-762    	; 0x2dc <main+0x56>
 5d6:	e1 2c       	mov	r14, r1
 5d8:	f1 2c       	mov	r15, r1
 5da:	0d c0       	rjmp	.+26     	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
			{
				for(int i=0; i < 64; i++)
				{
					for(int j=0; j<8;j++)
					{
						step_backward();
 5dc:	0e 94 73 03 	call	0x6e6	; 0x6e6 <step_backward>
			}
			else if(pulse_width > 0 && forward == false)
			{
				for(int i=0; i < 64; i++)
				{
					for(int j=0; j<8;j++)
 5e0:	0f 5f       	subi	r16, 0xFF	; 255
 5e2:	1f 4f       	sbci	r17, 0xFF	; 255
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <__EEPROM_REGION_LENGTH__+0x1ea>
 5e6:	00 e0       	ldi	r16, 0x00	; 0
 5e8:	10 e0       	ldi	r17, 0x00	; 0
 5ea:	08 30       	cpi	r16, 0x08	; 8
 5ec:	11 05       	cpc	r17, r1
 5ee:	b4 f3       	brlt	.-20     	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
				forward = false;
				
			}
			else if(pulse_width > 0 && forward == false)
			{
				for(int i=0; i < 64; i++)
 5f0:	ff ef       	ldi	r31, 0xFF	; 255
 5f2:	ef 1a       	sub	r14, r31
 5f4:	ff 0a       	sbc	r15, r31
 5f6:	20 e4       	ldi	r18, 0x40	; 64
 5f8:	e2 16       	cp	r14, r18
 5fa:	f1 04       	cpc	r15, r1
 5fc:	a4 f3       	brlt	.-24     	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
					for(int j=0; j<8;j++)
					{
						step_backward();
					}
				}
				PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_2_PIN)| (1 << STEP_3_PIN)| (1 << STEP_4_PIN));
 5fe:	8b b1       	in	r24, 0x0b	; 11
 600:	8f 70       	andi	r24, 0x0F	; 15
 602:	8b b9       	out	0x0b, r24	; 11
				forward = true;
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 60a:	68 ce       	rjmp	.-816    	; 0x2dc <main+0x56>

0000060c <init>:
#define STEP_3_PIN PD6
#define STEP_4_PIN PD7

void init() //핀설정
{
	DDRC &= ~(1<<IR_IN_PIN); // Set IR input pin as input
 60c:	87 b1       	in	r24, 0x07	; 7
 60e:	8b 7f       	andi	r24, 0xFB	; 251
 610:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<IR_IN_PIN); // Enable internal pull-up resistor for IR input pin
 612:	88 b1       	in	r24, 0x08	; 8
 614:	84 60       	ori	r24, 0x04	; 4
 616:	88 b9       	out	0x08, r24	; 8
	DDRD |= (1<<STEP_1_PIN)|(1<<STEP_2_PIN)|(1<<STEP_3_PIN)|(1<<STEP_4_PIN); // Set step motor pins as output
 618:	8a b1       	in	r24, 0x0a	; 10
 61a:	80 6f       	ori	r24, 0xF0	; 240
 61c:	8a b9       	out	0x0a, r24	; 10
	Init_UART0();
 61e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <Init_UART0>
 622:	08 95       	ret

00000624 <step_forward>:
}

void step_forward()   // 정방향
{
	PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_2_PIN)| (1 << STEP_3_PIN));   // low
 624:	8b b1       	in	r24, 0x0b	; 11
 626:	8f 78       	andi	r24, 0x8F	; 143
 628:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << STEP_4_PIN);      // high
 62a:	8b b1       	in	r24, 0x0b	; 11
 62c:	80 68       	ori	r24, 0x80	; 128
 62e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 630:	8f e9       	ldi	r24, 0x9F	; 159
 632:	9f e0       	ldi	r25, 0x0F	; 15
 634:	01 97       	sbiw	r24, 0x01	; 1
 636:	f1 f7       	brne	.-4      	; 0x634 <step_forward+0x10>
 638:	00 c0       	rjmp	.+0      	; 0x63a <step_forward+0x16>
 63a:	00 00       	nop
	_delay_us(1000);
	PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_2_PIN));   // low
 63c:	8b b1       	in	r24, 0x0b	; 11
 63e:	8f 7c       	andi	r24, 0xCF	; 207
 640:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << STEP_3_PIN) | (1 << STEP_4_PIN);      // high
 642:	8b b1       	in	r24, 0x0b	; 11
 644:	80 6c       	ori	r24, 0xC0	; 192
 646:	8b b9       	out	0x0b, r24	; 11
 648:	8f e9       	ldi	r24, 0x9F	; 159
 64a:	9f e0       	ldi	r25, 0x0F	; 15
 64c:	01 97       	sbiw	r24, 0x01	; 1
 64e:	f1 f7       	brne	.-4      	; 0x64c <step_forward+0x28>
 650:	00 c0       	rjmp	.+0      	; 0x652 <step_forward+0x2e>
 652:	00 00       	nop
	_delay_us(1000);
	PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_2_PIN)| (1 << STEP_4_PIN));   // low
 654:	8b b1       	in	r24, 0x0b	; 11
 656:	8f 74       	andi	r24, 0x4F	; 79
 658:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << STEP_3_PIN);      // high
 65a:	8b b1       	in	r24, 0x0b	; 11
 65c:	80 64       	ori	r24, 0x40	; 64
 65e:	8b b9       	out	0x0b, r24	; 11
 660:	8f e9       	ldi	r24, 0x9F	; 159
 662:	9f e0       	ldi	r25, 0x0F	; 15
 664:	01 97       	sbiw	r24, 0x01	; 1
 666:	f1 f7       	brne	.-4      	; 0x664 <step_forward+0x40>
 668:	00 c0       	rjmp	.+0      	; 0x66a <step_forward+0x46>
 66a:	00 00       	nop
	_delay_us(1000);
	PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_4_PIN));   // low
 66c:	8b b1       	in	r24, 0x0b	; 11
 66e:	8f 76       	andi	r24, 0x6F	; 111
 670:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << STEP_2_PIN) | (1 << STEP_3_PIN);      // high
 672:	8b b1       	in	r24, 0x0b	; 11
 674:	80 66       	ori	r24, 0x60	; 96
 676:	8b b9       	out	0x0b, r24	; 11
 678:	8f e9       	ldi	r24, 0x9F	; 159
 67a:	9f e0       	ldi	r25, 0x0F	; 15
 67c:	01 97       	sbiw	r24, 0x01	; 1
 67e:	f1 f7       	brne	.-4      	; 0x67c <step_forward+0x58>
 680:	00 c0       	rjmp	.+0      	; 0x682 <step_forward+0x5e>
 682:	00 00       	nop
	_delay_us(1000);
	PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_3_PIN)| (1 << STEP_4_PIN));   // low
 684:	8b b1       	in	r24, 0x0b	; 11
 686:	8f 72       	andi	r24, 0x2F	; 47
 688:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << STEP_2_PIN);      // high
 68a:	8b b1       	in	r24, 0x0b	; 11
 68c:	80 62       	ori	r24, 0x20	; 32
 68e:	8b b9       	out	0x0b, r24	; 11
 690:	8f e9       	ldi	r24, 0x9F	; 159
 692:	9f e0       	ldi	r25, 0x0F	; 15
 694:	01 97       	sbiw	r24, 0x01	; 1
 696:	f1 f7       	brne	.-4      	; 0x694 <step_forward+0x70>
 698:	00 c0       	rjmp	.+0      	; 0x69a <step_forward+0x76>
 69a:	00 00       	nop
	_delay_us(1000);
	PORTD &= ~((1 << STEP_3_PIN) | (1 << STEP_4_PIN));   // low
 69c:	8b b1       	in	r24, 0x0b	; 11
 69e:	8f 73       	andi	r24, 0x3F	; 63
 6a0:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << STEP_1_PIN) | (1 << STEP_2_PIN);      // high
 6a2:	8b b1       	in	r24, 0x0b	; 11
 6a4:	80 63       	ori	r24, 0x30	; 48
 6a6:	8b b9       	out	0x0b, r24	; 11
 6a8:	8f e9       	ldi	r24, 0x9F	; 159
 6aa:	9f e0       	ldi	r25, 0x0F	; 15
 6ac:	01 97       	sbiw	r24, 0x01	; 1
 6ae:	f1 f7       	brne	.-4      	; 0x6ac <step_forward+0x88>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <step_forward+0x8e>
 6b2:	00 00       	nop
	_delay_us(1000);
	PORTD &= ~((1 << STEP_2_PIN) | (1 << STEP_3_PIN)| (1 << STEP_4_PIN));   // low
 6b4:	8b b1       	in	r24, 0x0b	; 11
 6b6:	8f 71       	andi	r24, 0x1F	; 31
 6b8:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << STEP_1_PIN);      // high
 6ba:	8b b1       	in	r24, 0x0b	; 11
 6bc:	80 61       	ori	r24, 0x10	; 16
 6be:	8b b9       	out	0x0b, r24	; 11
 6c0:	8f e9       	ldi	r24, 0x9F	; 159
 6c2:	9f e0       	ldi	r25, 0x0F	; 15
 6c4:	01 97       	sbiw	r24, 0x01	; 1
 6c6:	f1 f7       	brne	.-4      	; 0x6c4 <step_forward+0xa0>
 6c8:	00 c0       	rjmp	.+0      	; 0x6ca <step_forward+0xa6>
 6ca:	00 00       	nop
	_delay_us(1000);
	PORTD &= ~((1 << STEP_2_PIN) | (1 << STEP_3_PIN));   // low
 6cc:	8b b1       	in	r24, 0x0b	; 11
 6ce:	8f 79       	andi	r24, 0x9F	; 159
 6d0:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << STEP_4_PIN) | (1 << STEP_1_PIN);      // high
 6d2:	8b b1       	in	r24, 0x0b	; 11
 6d4:	80 69       	ori	r24, 0x90	; 144
 6d6:	8b b9       	out	0x0b, r24	; 11
 6d8:	8f e9       	ldi	r24, 0x9F	; 159
 6da:	9f e0       	ldi	r25, 0x0F	; 15
 6dc:	01 97       	sbiw	r24, 0x01	; 1
 6de:	f1 f7       	brne	.-4      	; 0x6dc <step_forward+0xb8>
 6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <step_forward+0xbe>
 6e2:	00 00       	nop
 6e4:	08 95       	ret

000006e6 <step_backward>:
	_delay_us(1000);
}

void step_backward() //역방향
{
	PORTD &= ~((1 << STEP_2_PIN) | (1 << STEP_3_PIN)); // low
 6e6:	8b b1       	in	r24, 0x0b	; 11
 6e8:	8f 79       	andi	r24, 0x9F	; 159
 6ea:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << STEP_4_PIN) | (1 << STEP_1_PIN); // high
 6ec:	8b b1       	in	r24, 0x0b	; 11
 6ee:	80 69       	ori	r24, 0x90	; 144
 6f0:	8b b9       	out	0x0b, r24	; 11
 6f2:	8f e9       	ldi	r24, 0x9F	; 159
 6f4:	9f e0       	ldi	r25, 0x0F	; 15
 6f6:	01 97       	sbiw	r24, 0x01	; 1
 6f8:	f1 f7       	brne	.-4      	; 0x6f6 <step_backward+0x10>
 6fa:	00 c0       	rjmp	.+0      	; 0x6fc <step_backward+0x16>
 6fc:	00 00       	nop
	_delay_us(1000);
	PORTD &= ~((1 << STEP_2_PIN) | (1 << STEP_3_PIN)| (1 << STEP_4_PIN)); // low
 6fe:	8b b1       	in	r24, 0x0b	; 11
 700:	8f 71       	andi	r24, 0x1F	; 31
 702:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << STEP_1_PIN); // high
 704:	8b b1       	in	r24, 0x0b	; 11
 706:	80 61       	ori	r24, 0x10	; 16
 708:	8b b9       	out	0x0b, r24	; 11
 70a:	8f e9       	ldi	r24, 0x9F	; 159
 70c:	9f e0       	ldi	r25, 0x0F	; 15
 70e:	01 97       	sbiw	r24, 0x01	; 1
 710:	f1 f7       	brne	.-4      	; 0x70e <step_backward+0x28>
 712:	00 c0       	rjmp	.+0      	; 0x714 <step_backward+0x2e>
 714:	00 00       	nop
	_delay_us(1000);
	PORTD &= ~((1 << STEP_3_PIN) | (1 << STEP_4_PIN)); // low
 716:	8b b1       	in	r24, 0x0b	; 11
 718:	8f 73       	andi	r24, 0x3F	; 63
 71a:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << STEP_1_PIN) | (1 << STEP_2_PIN); // high
 71c:	8b b1       	in	r24, 0x0b	; 11
 71e:	80 63       	ori	r24, 0x30	; 48
 720:	8b b9       	out	0x0b, r24	; 11
 722:	8f e9       	ldi	r24, 0x9F	; 159
 724:	9f e0       	ldi	r25, 0x0F	; 15
 726:	01 97       	sbiw	r24, 0x01	; 1
 728:	f1 f7       	brne	.-4      	; 0x726 <step_backward+0x40>
 72a:	00 c0       	rjmp	.+0      	; 0x72c <step_backward+0x46>
 72c:	00 00       	nop
	_delay_us(1000);
	PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_3_PIN)| (1 << STEP_4_PIN)); // low
 72e:	8b b1       	in	r24, 0x0b	; 11
 730:	8f 72       	andi	r24, 0x2F	; 47
 732:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << STEP_2_PIN); // high
 734:	8b b1       	in	r24, 0x0b	; 11
 736:	80 62       	ori	r24, 0x20	; 32
 738:	8b b9       	out	0x0b, r24	; 11
 73a:	8f e9       	ldi	r24, 0x9F	; 159
 73c:	9f e0       	ldi	r25, 0x0F	; 15
 73e:	01 97       	sbiw	r24, 0x01	; 1
 740:	f1 f7       	brne	.-4      	; 0x73e <step_backward+0x58>
 742:	00 c0       	rjmp	.+0      	; 0x744 <step_backward+0x5e>
 744:	00 00       	nop
	_delay_us(1000);
	PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_4_PIN)); // low
 746:	8b b1       	in	r24, 0x0b	; 11
 748:	8f 76       	andi	r24, 0x6F	; 111
 74a:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << STEP_2_PIN) | (1 << STEP_3_PIN); // high
 74c:	8b b1       	in	r24, 0x0b	; 11
 74e:	80 66       	ori	r24, 0x60	; 96
 750:	8b b9       	out	0x0b, r24	; 11
 752:	8f e9       	ldi	r24, 0x9F	; 159
 754:	9f e0       	ldi	r25, 0x0F	; 15
 756:	01 97       	sbiw	r24, 0x01	; 1
 758:	f1 f7       	brne	.-4      	; 0x756 <step_backward+0x70>
 75a:	00 c0       	rjmp	.+0      	; 0x75c <step_backward+0x76>
 75c:	00 00       	nop
	_delay_us(1000);
	PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_2_PIN)| (1 << STEP_4_PIN)); // low
 75e:	8b b1       	in	r24, 0x0b	; 11
 760:	8f 74       	andi	r24, 0x4F	; 79
 762:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << STEP_3_PIN); // high
 764:	8b b1       	in	r24, 0x0b	; 11
 766:	80 64       	ori	r24, 0x40	; 64
 768:	8b b9       	out	0x0b, r24	; 11
 76a:	8f e9       	ldi	r24, 0x9F	; 159
 76c:	9f e0       	ldi	r25, 0x0F	; 15
 76e:	01 97       	sbiw	r24, 0x01	; 1
 770:	f1 f7       	brne	.-4      	; 0x76e <step_backward+0x88>
 772:	00 c0       	rjmp	.+0      	; 0x774 <step_backward+0x8e>
 774:	00 00       	nop
	_delay_us(1000);
	PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_2_PIN)); // low
 776:	8b b1       	in	r24, 0x0b	; 11
 778:	8f 7c       	andi	r24, 0xCF	; 207
 77a:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << STEP_3_PIN) | (1 << STEP_4_PIN); // high
 77c:	8b b1       	in	r24, 0x0b	; 11
 77e:	80 6c       	ori	r24, 0xC0	; 192
 780:	8b b9       	out	0x0b, r24	; 11
 782:	8f e9       	ldi	r24, 0x9F	; 159
 784:	9f e0       	ldi	r25, 0x0F	; 15
 786:	01 97       	sbiw	r24, 0x01	; 1
 788:	f1 f7       	brne	.-4      	; 0x786 <step_backward+0xa0>
 78a:	00 c0       	rjmp	.+0      	; 0x78c <step_backward+0xa6>
 78c:	00 00       	nop
	_delay_us(1000);
	PORTD &= ~((1 << STEP_1_PIN) | (1 << STEP_2_PIN)| (1 << STEP_3_PIN)); // low
 78e:	8b b1       	in	r24, 0x0b	; 11
 790:	8f 78       	andi	r24, 0x8F	; 143
 792:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << STEP_4_PIN); // high
 794:	8b b1       	in	r24, 0x0b	; 11
 796:	80 68       	ori	r24, 0x80	; 128
 798:	8b b9       	out	0x0b, r24	; 11
 79a:	8f e9       	ldi	r24, 0x9F	; 159
 79c:	9f e0       	ldi	r25, 0x0F	; 15
 79e:	01 97       	sbiw	r24, 0x01	; 1
 7a0:	f1 f7       	brne	.-4      	; 0x79e <step_backward+0xb8>
 7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <step_backward+0xbe>
 7a4:	00 00       	nop
 7a6:	08 95       	ret

000007a8 <read_ir>:
}

uint8_t read_ir() //IR신호 수신
{
	uint8_t pulse_width = 0;
	int timeout = 200;
 7a8:	88 ec       	ldi	r24, 0xC8	; 200
 7aa:	90 e0       	ldi	r25, 0x00	; 0
	while(PINC & (1<<IR_IN_PIN) && timeout) // Wait for IR signal to start
 7ac:	07 c0       	rjmp	.+14     	; 0x7bc <read_ir+0x14>
 7ae:	ef e1       	ldi	r30, 0x1F	; 31
 7b0:	fe e4       	ldi	r31, 0x4E	; 78
 7b2:	31 97       	sbiw	r30, 0x01	; 1
 7b4:	f1 f7       	brne	.-4      	; 0x7b2 <read_ir+0xa>
 7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <read_ir+0x10>
 7b8:	00 00       	nop
	{
		_delay_us(5000);
		timeout--;
 7ba:	01 97       	sbiw	r24, 0x01	; 1

uint8_t read_ir() //IR신호 수신
{
	uint8_t pulse_width = 0;
	int timeout = 200;
	while(PINC & (1<<IR_IN_PIN) && timeout) // Wait for IR signal to start
 7bc:	32 9b       	sbis	0x06, 2	; 6
 7be:	0c c0       	rjmp	.+24     	; 0x7d8 <read_ir+0x30>
 7c0:	00 97       	sbiw	r24, 0x00	; 0
 7c2:	a9 f7       	brne	.-22     	; 0x7ae <read_ir+0x6>
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	09 c0       	rjmp	.+18     	; 0x7da <read_ir+0x32>
 7c8:	ef e1       	ldi	r30, 0x1F	; 31
 7ca:	fe e4       	ldi	r31, 0x4E	; 78
 7cc:	31 97       	sbiw	r30, 0x01	; 1
 7ce:	f1 f7       	brne	.-4      	; 0x7cc <read_ir+0x24>
 7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <read_ir+0x2a>
 7d2:	00 00       	nop
		timeout--;
	}
	while(!(PINC & (1<<IR_IN_PIN))) // Measure IR signal pulse width
	{
		_delay_us(5000);
		pulse_width++;
 7d4:	8f 5f       	subi	r24, 0xFF	; 255
 7d6:	01 c0       	rjmp	.+2      	; 0x7da <read_ir+0x32>
 7d8:	80 e0       	ldi	r24, 0x00	; 0
	while(PINC & (1<<IR_IN_PIN) && timeout) // Wait for IR signal to start
	{
		_delay_us(5000);
		timeout--;
	}
	while(!(PINC & (1<<IR_IN_PIN))) // Measure IR signal pulse width
 7da:	32 9b       	sbis	0x06, 2	; 6
 7dc:	f5 cf       	rjmp	.-22     	; 0x7c8 <read_ir+0x20>
	{
		_delay_us(5000);
		pulse_width++;
	}
	return pulse_width;
}
 7de:	08 95       	ret

000007e0 <Init_UART0>:
 7e0:	88 e1       	ldi	r24, 0x18	; 24
 7e2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 7e6:	86 e0       	ldi	r24, 0x06	; 6
 7e8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 7ec:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 7f0:	87 e6       	ldi	r24, 0x67	; 103
 7f2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 7f6:	08 95       	ret

000007f8 <USART_Init>:
 7f8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 7fc:	88 e1       	ldi	r24, 0x18	; 24
 7fe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 802:	86 e0       	ldi	r24, 0x06	; 6
 804:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 808:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 80c:	87 e6       	ldi	r24, 0x67	; 103
 80e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 812:	08 95       	ret

00000814 <USART_Transmit>:
 814:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 818:	95 ff       	sbrs	r25, 5
 81a:	fc cf       	rjmp	.-8      	; 0x814 <USART_Transmit>
 81c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 820:	08 95       	ret

00000822 <strTransmit>:
 822:	cf 93       	push	r28
 824:	df 93       	push	r29
 826:	ec 01       	movw	r28, r24
 828:	03 c0       	rjmp	.+6      	; 0x830 <strTransmit+0xe>
 82a:	0e 94 0a 04 	call	0x814	; 0x814 <USART_Transmit>
 82e:	21 96       	adiw	r28, 0x01	; 1
 830:	88 81       	ld	r24, Y
 832:	81 11       	cpse	r24, r1
 834:	fa cf       	rjmp	.-12     	; 0x82a <strTransmit+0x8>
 836:	8a e0       	ldi	r24, 0x0A	; 10
 838:	0e 94 0a 04 	call	0x814	; 0x814 <USART_Transmit>
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	08 95       	ret

00000842 <sprintf>:
 842:	ae e0       	ldi	r26, 0x0E	; 14
 844:	b0 e0       	ldi	r27, 0x00	; 0
 846:	e7 e2       	ldi	r30, 0x27	; 39
 848:	f4 e0       	ldi	r31, 0x04	; 4
 84a:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__prologue_saves__+0x1c>
 84e:	0d 89       	ldd	r16, Y+21	; 0x15
 850:	1e 89       	ldd	r17, Y+22	; 0x16
 852:	86 e0       	ldi	r24, 0x06	; 6
 854:	8c 83       	std	Y+4, r24	; 0x04
 856:	1a 83       	std	Y+2, r17	; 0x02
 858:	09 83       	std	Y+1, r16	; 0x01
 85a:	8f ef       	ldi	r24, 0xFF	; 255
 85c:	9f e7       	ldi	r25, 0x7F	; 127
 85e:	9e 83       	std	Y+6, r25	; 0x06
 860:	8d 83       	std	Y+5, r24	; 0x05
 862:	ae 01       	movw	r20, r28
 864:	47 5e       	subi	r20, 0xE7	; 231
 866:	5f 4f       	sbci	r21, 0xFF	; 255
 868:	6f 89       	ldd	r22, Y+23	; 0x17
 86a:	78 8d       	ldd	r23, Y+24	; 0x18
 86c:	ce 01       	movw	r24, r28
 86e:	01 96       	adiw	r24, 0x01	; 1
 870:	0e 94 43 04 	call	0x886	; 0x886 <vfprintf>
 874:	ef 81       	ldd	r30, Y+7	; 0x07
 876:	f8 85       	ldd	r31, Y+8	; 0x08
 878:	e0 0f       	add	r30, r16
 87a:	f1 1f       	adc	r31, r17
 87c:	10 82       	st	Z, r1
 87e:	2e 96       	adiw	r28, 0x0e	; 14
 880:	e4 e0       	ldi	r30, 0x04	; 4
 882:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <__epilogue_restores__+0x1c>

00000886 <vfprintf>:
 886:	ab e0       	ldi	r26, 0x0B	; 11
 888:	b0 e0       	ldi	r27, 0x00	; 0
 88a:	e9 e4       	ldi	r30, 0x49	; 73
 88c:	f4 e0       	ldi	r31, 0x04	; 4
 88e:	0c 94 d4 06 	jmp	0xda8	; 0xda8 <__prologue_saves__>
 892:	6c 01       	movw	r12, r24
 894:	7b 01       	movw	r14, r22
 896:	8a 01       	movw	r16, r20
 898:	fc 01       	movw	r30, r24
 89a:	17 82       	std	Z+7, r1	; 0x07
 89c:	16 82       	std	Z+6, r1	; 0x06
 89e:	83 81       	ldd	r24, Z+3	; 0x03
 8a0:	81 ff       	sbrs	r24, 1
 8a2:	cc c1       	rjmp	.+920    	; 0xc3c <__stack+0x33d>
 8a4:	ce 01       	movw	r24, r28
 8a6:	01 96       	adiw	r24, 0x01	; 1
 8a8:	3c 01       	movw	r6, r24
 8aa:	f6 01       	movw	r30, r12
 8ac:	93 81       	ldd	r25, Z+3	; 0x03
 8ae:	f7 01       	movw	r30, r14
 8b0:	93 fd       	sbrc	r25, 3
 8b2:	85 91       	lpm	r24, Z+
 8b4:	93 ff       	sbrs	r25, 3
 8b6:	81 91       	ld	r24, Z+
 8b8:	7f 01       	movw	r14, r30
 8ba:	88 23       	and	r24, r24
 8bc:	09 f4       	brne	.+2      	; 0x8c0 <vfprintf+0x3a>
 8be:	ba c1       	rjmp	.+884    	; 0xc34 <__stack+0x335>
 8c0:	85 32       	cpi	r24, 0x25	; 37
 8c2:	39 f4       	brne	.+14     	; 0x8d2 <vfprintf+0x4c>
 8c4:	93 fd       	sbrc	r25, 3
 8c6:	85 91       	lpm	r24, Z+
 8c8:	93 ff       	sbrs	r25, 3
 8ca:	81 91       	ld	r24, Z+
 8cc:	7f 01       	movw	r14, r30
 8ce:	85 32       	cpi	r24, 0x25	; 37
 8d0:	29 f4       	brne	.+10     	; 0x8dc <vfprintf+0x56>
 8d2:	b6 01       	movw	r22, r12
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	0e 94 3a 06 	call	0xc74	; 0xc74 <fputc>
 8da:	e7 cf       	rjmp	.-50     	; 0x8aa <vfprintf+0x24>
 8dc:	91 2c       	mov	r9, r1
 8de:	21 2c       	mov	r2, r1
 8e0:	31 2c       	mov	r3, r1
 8e2:	ff e1       	ldi	r31, 0x1F	; 31
 8e4:	f3 15       	cp	r31, r3
 8e6:	d8 f0       	brcs	.+54     	; 0x91e <__stack+0x1f>
 8e8:	8b 32       	cpi	r24, 0x2B	; 43
 8ea:	79 f0       	breq	.+30     	; 0x90a <__stack+0xb>
 8ec:	38 f4       	brcc	.+14     	; 0x8fc <vfprintf+0x76>
 8ee:	80 32       	cpi	r24, 0x20	; 32
 8f0:	79 f0       	breq	.+30     	; 0x910 <__stack+0x11>
 8f2:	83 32       	cpi	r24, 0x23	; 35
 8f4:	a1 f4       	brne	.+40     	; 0x91e <__stack+0x1f>
 8f6:	23 2d       	mov	r18, r3
 8f8:	20 61       	ori	r18, 0x10	; 16
 8fa:	1d c0       	rjmp	.+58     	; 0x936 <__stack+0x37>
 8fc:	8d 32       	cpi	r24, 0x2D	; 45
 8fe:	61 f0       	breq	.+24     	; 0x918 <__stack+0x19>
 900:	80 33       	cpi	r24, 0x30	; 48
 902:	69 f4       	brne	.+26     	; 0x91e <__stack+0x1f>
 904:	23 2d       	mov	r18, r3
 906:	21 60       	ori	r18, 0x01	; 1
 908:	16 c0       	rjmp	.+44     	; 0x936 <__stack+0x37>
 90a:	83 2d       	mov	r24, r3
 90c:	82 60       	ori	r24, 0x02	; 2
 90e:	38 2e       	mov	r3, r24
 910:	e3 2d       	mov	r30, r3
 912:	e4 60       	ori	r30, 0x04	; 4
 914:	3e 2e       	mov	r3, r30
 916:	2a c0       	rjmp	.+84     	; 0x96c <__stack+0x6d>
 918:	f3 2d       	mov	r31, r3
 91a:	f8 60       	ori	r31, 0x08	; 8
 91c:	1d c0       	rjmp	.+58     	; 0x958 <__stack+0x59>
 91e:	37 fc       	sbrc	r3, 7
 920:	2d c0       	rjmp	.+90     	; 0x97c <__stack+0x7d>
 922:	20 ed       	ldi	r18, 0xD0	; 208
 924:	28 0f       	add	r18, r24
 926:	2a 30       	cpi	r18, 0x0A	; 10
 928:	40 f0       	brcs	.+16     	; 0x93a <__stack+0x3b>
 92a:	8e 32       	cpi	r24, 0x2E	; 46
 92c:	b9 f4       	brne	.+46     	; 0x95c <__stack+0x5d>
 92e:	36 fc       	sbrc	r3, 6
 930:	81 c1       	rjmp	.+770    	; 0xc34 <__stack+0x335>
 932:	23 2d       	mov	r18, r3
 934:	20 64       	ori	r18, 0x40	; 64
 936:	32 2e       	mov	r3, r18
 938:	19 c0       	rjmp	.+50     	; 0x96c <__stack+0x6d>
 93a:	36 fe       	sbrs	r3, 6
 93c:	06 c0       	rjmp	.+12     	; 0x94a <__stack+0x4b>
 93e:	8a e0       	ldi	r24, 0x0A	; 10
 940:	98 9e       	mul	r9, r24
 942:	20 0d       	add	r18, r0
 944:	11 24       	eor	r1, r1
 946:	92 2e       	mov	r9, r18
 948:	11 c0       	rjmp	.+34     	; 0x96c <__stack+0x6d>
 94a:	ea e0       	ldi	r30, 0x0A	; 10
 94c:	2e 9e       	mul	r2, r30
 94e:	20 0d       	add	r18, r0
 950:	11 24       	eor	r1, r1
 952:	22 2e       	mov	r2, r18
 954:	f3 2d       	mov	r31, r3
 956:	f0 62       	ori	r31, 0x20	; 32
 958:	3f 2e       	mov	r3, r31
 95a:	08 c0       	rjmp	.+16     	; 0x96c <__stack+0x6d>
 95c:	8c 36       	cpi	r24, 0x6C	; 108
 95e:	21 f4       	brne	.+8      	; 0x968 <__stack+0x69>
 960:	83 2d       	mov	r24, r3
 962:	80 68       	ori	r24, 0x80	; 128
 964:	38 2e       	mov	r3, r24
 966:	02 c0       	rjmp	.+4      	; 0x96c <__stack+0x6d>
 968:	88 36       	cpi	r24, 0x68	; 104
 96a:	41 f4       	brne	.+16     	; 0x97c <__stack+0x7d>
 96c:	f7 01       	movw	r30, r14
 96e:	93 fd       	sbrc	r25, 3
 970:	85 91       	lpm	r24, Z+
 972:	93 ff       	sbrs	r25, 3
 974:	81 91       	ld	r24, Z+
 976:	7f 01       	movw	r14, r30
 978:	81 11       	cpse	r24, r1
 97a:	b3 cf       	rjmp	.-154    	; 0x8e2 <vfprintf+0x5c>
 97c:	98 2f       	mov	r25, r24
 97e:	9f 7d       	andi	r25, 0xDF	; 223
 980:	95 54       	subi	r25, 0x45	; 69
 982:	93 30       	cpi	r25, 0x03	; 3
 984:	28 f4       	brcc	.+10     	; 0x990 <__stack+0x91>
 986:	0c 5f       	subi	r16, 0xFC	; 252
 988:	1f 4f       	sbci	r17, 0xFF	; 255
 98a:	9f e3       	ldi	r25, 0x3F	; 63
 98c:	99 83       	std	Y+1, r25	; 0x01
 98e:	0d c0       	rjmp	.+26     	; 0x9aa <__stack+0xab>
 990:	83 36       	cpi	r24, 0x63	; 99
 992:	31 f0       	breq	.+12     	; 0x9a0 <__stack+0xa1>
 994:	83 37       	cpi	r24, 0x73	; 115
 996:	71 f0       	breq	.+28     	; 0x9b4 <__stack+0xb5>
 998:	83 35       	cpi	r24, 0x53	; 83
 99a:	09 f0       	breq	.+2      	; 0x99e <__stack+0x9f>
 99c:	59 c0       	rjmp	.+178    	; 0xa50 <__stack+0x151>
 99e:	21 c0       	rjmp	.+66     	; 0x9e2 <__stack+0xe3>
 9a0:	f8 01       	movw	r30, r16
 9a2:	80 81       	ld	r24, Z
 9a4:	89 83       	std	Y+1, r24	; 0x01
 9a6:	0e 5f       	subi	r16, 0xFE	; 254
 9a8:	1f 4f       	sbci	r17, 0xFF	; 255
 9aa:	88 24       	eor	r8, r8
 9ac:	83 94       	inc	r8
 9ae:	91 2c       	mov	r9, r1
 9b0:	53 01       	movw	r10, r6
 9b2:	13 c0       	rjmp	.+38     	; 0x9da <__stack+0xdb>
 9b4:	28 01       	movw	r4, r16
 9b6:	f2 e0       	ldi	r31, 0x02	; 2
 9b8:	4f 0e       	add	r4, r31
 9ba:	51 1c       	adc	r5, r1
 9bc:	f8 01       	movw	r30, r16
 9be:	a0 80       	ld	r10, Z
 9c0:	b1 80       	ldd	r11, Z+1	; 0x01
 9c2:	36 fe       	sbrs	r3, 6
 9c4:	03 c0       	rjmp	.+6      	; 0x9cc <__stack+0xcd>
 9c6:	69 2d       	mov	r22, r9
 9c8:	70 e0       	ldi	r23, 0x00	; 0
 9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <__stack+0xd1>
 9cc:	6f ef       	ldi	r22, 0xFF	; 255
 9ce:	7f ef       	ldi	r23, 0xFF	; 255
 9d0:	c5 01       	movw	r24, r10
 9d2:	0e 94 2f 06 	call	0xc5e	; 0xc5e <strnlen>
 9d6:	4c 01       	movw	r8, r24
 9d8:	82 01       	movw	r16, r4
 9da:	f3 2d       	mov	r31, r3
 9dc:	ff 77       	andi	r31, 0x7F	; 127
 9de:	3f 2e       	mov	r3, r31
 9e0:	16 c0       	rjmp	.+44     	; 0xa0e <__stack+0x10f>
 9e2:	28 01       	movw	r4, r16
 9e4:	22 e0       	ldi	r18, 0x02	; 2
 9e6:	42 0e       	add	r4, r18
 9e8:	51 1c       	adc	r5, r1
 9ea:	f8 01       	movw	r30, r16
 9ec:	a0 80       	ld	r10, Z
 9ee:	b1 80       	ldd	r11, Z+1	; 0x01
 9f0:	36 fe       	sbrs	r3, 6
 9f2:	03 c0       	rjmp	.+6      	; 0x9fa <__stack+0xfb>
 9f4:	69 2d       	mov	r22, r9
 9f6:	70 e0       	ldi	r23, 0x00	; 0
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <__stack+0xff>
 9fa:	6f ef       	ldi	r22, 0xFF	; 255
 9fc:	7f ef       	ldi	r23, 0xFF	; 255
 9fe:	c5 01       	movw	r24, r10
 a00:	0e 94 24 06 	call	0xc48	; 0xc48 <strnlen_P>
 a04:	4c 01       	movw	r8, r24
 a06:	f3 2d       	mov	r31, r3
 a08:	f0 68       	ori	r31, 0x80	; 128
 a0a:	3f 2e       	mov	r3, r31
 a0c:	82 01       	movw	r16, r4
 a0e:	33 fc       	sbrc	r3, 3
 a10:	1b c0       	rjmp	.+54     	; 0xa48 <__stack+0x149>
 a12:	82 2d       	mov	r24, r2
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	88 16       	cp	r8, r24
 a18:	99 06       	cpc	r9, r25
 a1a:	b0 f4       	brcc	.+44     	; 0xa48 <__stack+0x149>
 a1c:	b6 01       	movw	r22, r12
 a1e:	80 e2       	ldi	r24, 0x20	; 32
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	0e 94 3a 06 	call	0xc74	; 0xc74 <fputc>
 a26:	2a 94       	dec	r2
 a28:	f4 cf       	rjmp	.-24     	; 0xa12 <__stack+0x113>
 a2a:	f5 01       	movw	r30, r10
 a2c:	37 fc       	sbrc	r3, 7
 a2e:	85 91       	lpm	r24, Z+
 a30:	37 fe       	sbrs	r3, 7
 a32:	81 91       	ld	r24, Z+
 a34:	5f 01       	movw	r10, r30
 a36:	b6 01       	movw	r22, r12
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	0e 94 3a 06 	call	0xc74	; 0xc74 <fputc>
 a3e:	21 10       	cpse	r2, r1
 a40:	2a 94       	dec	r2
 a42:	21 e0       	ldi	r18, 0x01	; 1
 a44:	82 1a       	sub	r8, r18
 a46:	91 08       	sbc	r9, r1
 a48:	81 14       	cp	r8, r1
 a4a:	91 04       	cpc	r9, r1
 a4c:	71 f7       	brne	.-36     	; 0xa2a <__stack+0x12b>
 a4e:	e8 c0       	rjmp	.+464    	; 0xc20 <__stack+0x321>
 a50:	84 36       	cpi	r24, 0x64	; 100
 a52:	11 f0       	breq	.+4      	; 0xa58 <__stack+0x159>
 a54:	89 36       	cpi	r24, 0x69	; 105
 a56:	41 f5       	brne	.+80     	; 0xaa8 <__stack+0x1a9>
 a58:	f8 01       	movw	r30, r16
 a5a:	37 fe       	sbrs	r3, 7
 a5c:	07 c0       	rjmp	.+14     	; 0xa6c <__stack+0x16d>
 a5e:	60 81       	ld	r22, Z
 a60:	71 81       	ldd	r23, Z+1	; 0x01
 a62:	82 81       	ldd	r24, Z+2	; 0x02
 a64:	93 81       	ldd	r25, Z+3	; 0x03
 a66:	0c 5f       	subi	r16, 0xFC	; 252
 a68:	1f 4f       	sbci	r17, 0xFF	; 255
 a6a:	08 c0       	rjmp	.+16     	; 0xa7c <__stack+0x17d>
 a6c:	60 81       	ld	r22, Z
 a6e:	71 81       	ldd	r23, Z+1	; 0x01
 a70:	07 2e       	mov	r0, r23
 a72:	00 0c       	add	r0, r0
 a74:	88 0b       	sbc	r24, r24
 a76:	99 0b       	sbc	r25, r25
 a78:	0e 5f       	subi	r16, 0xFE	; 254
 a7a:	1f 4f       	sbci	r17, 0xFF	; 255
 a7c:	f3 2d       	mov	r31, r3
 a7e:	ff 76       	andi	r31, 0x6F	; 111
 a80:	3f 2e       	mov	r3, r31
 a82:	97 ff       	sbrs	r25, 7
 a84:	09 c0       	rjmp	.+18     	; 0xa98 <__stack+0x199>
 a86:	90 95       	com	r25
 a88:	80 95       	com	r24
 a8a:	70 95       	com	r23
 a8c:	61 95       	neg	r22
 a8e:	7f 4f       	sbci	r23, 0xFF	; 255
 a90:	8f 4f       	sbci	r24, 0xFF	; 255
 a92:	9f 4f       	sbci	r25, 0xFF	; 255
 a94:	f0 68       	ori	r31, 0x80	; 128
 a96:	3f 2e       	mov	r3, r31
 a98:	2a e0       	ldi	r18, 0x0A	; 10
 a9a:	30 e0       	ldi	r19, 0x00	; 0
 a9c:	a3 01       	movw	r20, r6
 a9e:	0e 94 76 06 	call	0xcec	; 0xcec <__ultoa_invert>
 aa2:	88 2e       	mov	r8, r24
 aa4:	86 18       	sub	r8, r6
 aa6:	45 c0       	rjmp	.+138    	; 0xb32 <__stack+0x233>
 aa8:	85 37       	cpi	r24, 0x75	; 117
 aaa:	31 f4       	brne	.+12     	; 0xab8 <__stack+0x1b9>
 aac:	23 2d       	mov	r18, r3
 aae:	2f 7e       	andi	r18, 0xEF	; 239
 ab0:	b2 2e       	mov	r11, r18
 ab2:	2a e0       	ldi	r18, 0x0A	; 10
 ab4:	30 e0       	ldi	r19, 0x00	; 0
 ab6:	25 c0       	rjmp	.+74     	; 0xb02 <__stack+0x203>
 ab8:	93 2d       	mov	r25, r3
 aba:	99 7f       	andi	r25, 0xF9	; 249
 abc:	b9 2e       	mov	r11, r25
 abe:	8f 36       	cpi	r24, 0x6F	; 111
 ac0:	c1 f0       	breq	.+48     	; 0xaf2 <__stack+0x1f3>
 ac2:	18 f4       	brcc	.+6      	; 0xaca <__stack+0x1cb>
 ac4:	88 35       	cpi	r24, 0x58	; 88
 ac6:	79 f0       	breq	.+30     	; 0xae6 <__stack+0x1e7>
 ac8:	b5 c0       	rjmp	.+362    	; 0xc34 <__stack+0x335>
 aca:	80 37       	cpi	r24, 0x70	; 112
 acc:	19 f0       	breq	.+6      	; 0xad4 <__stack+0x1d5>
 ace:	88 37       	cpi	r24, 0x78	; 120
 ad0:	21 f0       	breq	.+8      	; 0xada <__stack+0x1db>
 ad2:	b0 c0       	rjmp	.+352    	; 0xc34 <__stack+0x335>
 ad4:	e9 2f       	mov	r30, r25
 ad6:	e0 61       	ori	r30, 0x10	; 16
 ad8:	be 2e       	mov	r11, r30
 ada:	b4 fe       	sbrs	r11, 4
 adc:	0d c0       	rjmp	.+26     	; 0xaf8 <__stack+0x1f9>
 ade:	fb 2d       	mov	r31, r11
 ae0:	f4 60       	ori	r31, 0x04	; 4
 ae2:	bf 2e       	mov	r11, r31
 ae4:	09 c0       	rjmp	.+18     	; 0xaf8 <__stack+0x1f9>
 ae6:	34 fe       	sbrs	r3, 4
 ae8:	0a c0       	rjmp	.+20     	; 0xafe <__stack+0x1ff>
 aea:	29 2f       	mov	r18, r25
 aec:	26 60       	ori	r18, 0x06	; 6
 aee:	b2 2e       	mov	r11, r18
 af0:	06 c0       	rjmp	.+12     	; 0xafe <__stack+0x1ff>
 af2:	28 e0       	ldi	r18, 0x08	; 8
 af4:	30 e0       	ldi	r19, 0x00	; 0
 af6:	05 c0       	rjmp	.+10     	; 0xb02 <__stack+0x203>
 af8:	20 e1       	ldi	r18, 0x10	; 16
 afa:	30 e0       	ldi	r19, 0x00	; 0
 afc:	02 c0       	rjmp	.+4      	; 0xb02 <__stack+0x203>
 afe:	20 e1       	ldi	r18, 0x10	; 16
 b00:	32 e0       	ldi	r19, 0x02	; 2
 b02:	f8 01       	movw	r30, r16
 b04:	b7 fe       	sbrs	r11, 7
 b06:	07 c0       	rjmp	.+14     	; 0xb16 <__stack+0x217>
 b08:	60 81       	ld	r22, Z
 b0a:	71 81       	ldd	r23, Z+1	; 0x01
 b0c:	82 81       	ldd	r24, Z+2	; 0x02
 b0e:	93 81       	ldd	r25, Z+3	; 0x03
 b10:	0c 5f       	subi	r16, 0xFC	; 252
 b12:	1f 4f       	sbci	r17, 0xFF	; 255
 b14:	06 c0       	rjmp	.+12     	; 0xb22 <__stack+0x223>
 b16:	60 81       	ld	r22, Z
 b18:	71 81       	ldd	r23, Z+1	; 0x01
 b1a:	80 e0       	ldi	r24, 0x00	; 0
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	0e 5f       	subi	r16, 0xFE	; 254
 b20:	1f 4f       	sbci	r17, 0xFF	; 255
 b22:	a3 01       	movw	r20, r6
 b24:	0e 94 76 06 	call	0xcec	; 0xcec <__ultoa_invert>
 b28:	88 2e       	mov	r8, r24
 b2a:	86 18       	sub	r8, r6
 b2c:	fb 2d       	mov	r31, r11
 b2e:	ff 77       	andi	r31, 0x7F	; 127
 b30:	3f 2e       	mov	r3, r31
 b32:	36 fe       	sbrs	r3, 6
 b34:	0d c0       	rjmp	.+26     	; 0xb50 <__stack+0x251>
 b36:	23 2d       	mov	r18, r3
 b38:	2e 7f       	andi	r18, 0xFE	; 254
 b3a:	a2 2e       	mov	r10, r18
 b3c:	89 14       	cp	r8, r9
 b3e:	58 f4       	brcc	.+22     	; 0xb56 <__stack+0x257>
 b40:	34 fe       	sbrs	r3, 4
 b42:	0b c0       	rjmp	.+22     	; 0xb5a <__stack+0x25b>
 b44:	32 fc       	sbrc	r3, 2
 b46:	09 c0       	rjmp	.+18     	; 0xb5a <__stack+0x25b>
 b48:	83 2d       	mov	r24, r3
 b4a:	8e 7e       	andi	r24, 0xEE	; 238
 b4c:	a8 2e       	mov	r10, r24
 b4e:	05 c0       	rjmp	.+10     	; 0xb5a <__stack+0x25b>
 b50:	b8 2c       	mov	r11, r8
 b52:	a3 2c       	mov	r10, r3
 b54:	03 c0       	rjmp	.+6      	; 0xb5c <__stack+0x25d>
 b56:	b8 2c       	mov	r11, r8
 b58:	01 c0       	rjmp	.+2      	; 0xb5c <__stack+0x25d>
 b5a:	b9 2c       	mov	r11, r9
 b5c:	a4 fe       	sbrs	r10, 4
 b5e:	0f c0       	rjmp	.+30     	; 0xb7e <__stack+0x27f>
 b60:	fe 01       	movw	r30, r28
 b62:	e8 0d       	add	r30, r8
 b64:	f1 1d       	adc	r31, r1
 b66:	80 81       	ld	r24, Z
 b68:	80 33       	cpi	r24, 0x30	; 48
 b6a:	21 f4       	brne	.+8      	; 0xb74 <__stack+0x275>
 b6c:	9a 2d       	mov	r25, r10
 b6e:	99 7e       	andi	r25, 0xE9	; 233
 b70:	a9 2e       	mov	r10, r25
 b72:	09 c0       	rjmp	.+18     	; 0xb86 <__stack+0x287>
 b74:	a2 fe       	sbrs	r10, 2
 b76:	06 c0       	rjmp	.+12     	; 0xb84 <__stack+0x285>
 b78:	b3 94       	inc	r11
 b7a:	b3 94       	inc	r11
 b7c:	04 c0       	rjmp	.+8      	; 0xb86 <__stack+0x287>
 b7e:	8a 2d       	mov	r24, r10
 b80:	86 78       	andi	r24, 0x86	; 134
 b82:	09 f0       	breq	.+2      	; 0xb86 <__stack+0x287>
 b84:	b3 94       	inc	r11
 b86:	a3 fc       	sbrc	r10, 3
 b88:	11 c0       	rjmp	.+34     	; 0xbac <__stack+0x2ad>
 b8a:	a0 fe       	sbrs	r10, 0
 b8c:	06 c0       	rjmp	.+12     	; 0xb9a <__stack+0x29b>
 b8e:	b2 14       	cp	r11, r2
 b90:	88 f4       	brcc	.+34     	; 0xbb4 <__stack+0x2b5>
 b92:	28 0c       	add	r2, r8
 b94:	92 2c       	mov	r9, r2
 b96:	9b 18       	sub	r9, r11
 b98:	0e c0       	rjmp	.+28     	; 0xbb6 <__stack+0x2b7>
 b9a:	b2 14       	cp	r11, r2
 b9c:	60 f4       	brcc	.+24     	; 0xbb6 <__stack+0x2b7>
 b9e:	b6 01       	movw	r22, r12
 ba0:	80 e2       	ldi	r24, 0x20	; 32
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	0e 94 3a 06 	call	0xc74	; 0xc74 <fputc>
 ba8:	b3 94       	inc	r11
 baa:	f7 cf       	rjmp	.-18     	; 0xb9a <__stack+0x29b>
 bac:	b2 14       	cp	r11, r2
 bae:	18 f4       	brcc	.+6      	; 0xbb6 <__stack+0x2b7>
 bb0:	2b 18       	sub	r2, r11
 bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <__stack+0x2b9>
 bb4:	98 2c       	mov	r9, r8
 bb6:	21 2c       	mov	r2, r1
 bb8:	a4 fe       	sbrs	r10, 4
 bba:	10 c0       	rjmp	.+32     	; 0xbdc <__stack+0x2dd>
 bbc:	b6 01       	movw	r22, r12
 bbe:	80 e3       	ldi	r24, 0x30	; 48
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	0e 94 3a 06 	call	0xc74	; 0xc74 <fputc>
 bc6:	a2 fe       	sbrs	r10, 2
 bc8:	17 c0       	rjmp	.+46     	; 0xbf8 <__stack+0x2f9>
 bca:	a1 fc       	sbrc	r10, 1
 bcc:	03 c0       	rjmp	.+6      	; 0xbd4 <__stack+0x2d5>
 bce:	88 e7       	ldi	r24, 0x78	; 120
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <__stack+0x2d9>
 bd4:	88 e5       	ldi	r24, 0x58	; 88
 bd6:	90 e0       	ldi	r25, 0x00	; 0
 bd8:	b6 01       	movw	r22, r12
 bda:	0c c0       	rjmp	.+24     	; 0xbf4 <__stack+0x2f5>
 bdc:	8a 2d       	mov	r24, r10
 bde:	86 78       	andi	r24, 0x86	; 134
 be0:	59 f0       	breq	.+22     	; 0xbf8 <__stack+0x2f9>
 be2:	a1 fe       	sbrs	r10, 1
 be4:	02 c0       	rjmp	.+4      	; 0xbea <__stack+0x2eb>
 be6:	8b e2       	ldi	r24, 0x2B	; 43
 be8:	01 c0       	rjmp	.+2      	; 0xbec <__stack+0x2ed>
 bea:	80 e2       	ldi	r24, 0x20	; 32
 bec:	a7 fc       	sbrc	r10, 7
 bee:	8d e2       	ldi	r24, 0x2D	; 45
 bf0:	b6 01       	movw	r22, r12
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	0e 94 3a 06 	call	0xc74	; 0xc74 <fputc>
 bf8:	89 14       	cp	r8, r9
 bfa:	38 f4       	brcc	.+14     	; 0xc0a <__stack+0x30b>
 bfc:	b6 01       	movw	r22, r12
 bfe:	80 e3       	ldi	r24, 0x30	; 48
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	0e 94 3a 06 	call	0xc74	; 0xc74 <fputc>
 c06:	9a 94       	dec	r9
 c08:	f7 cf       	rjmp	.-18     	; 0xbf8 <__stack+0x2f9>
 c0a:	8a 94       	dec	r8
 c0c:	f3 01       	movw	r30, r6
 c0e:	e8 0d       	add	r30, r8
 c10:	f1 1d       	adc	r31, r1
 c12:	80 81       	ld	r24, Z
 c14:	b6 01       	movw	r22, r12
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	0e 94 3a 06 	call	0xc74	; 0xc74 <fputc>
 c1c:	81 10       	cpse	r8, r1
 c1e:	f5 cf       	rjmp	.-22     	; 0xc0a <__stack+0x30b>
 c20:	22 20       	and	r2, r2
 c22:	09 f4       	brne	.+2      	; 0xc26 <__stack+0x327>
 c24:	42 ce       	rjmp	.-892    	; 0x8aa <vfprintf+0x24>
 c26:	b6 01       	movw	r22, r12
 c28:	80 e2       	ldi	r24, 0x20	; 32
 c2a:	90 e0       	ldi	r25, 0x00	; 0
 c2c:	0e 94 3a 06 	call	0xc74	; 0xc74 <fputc>
 c30:	2a 94       	dec	r2
 c32:	f6 cf       	rjmp	.-20     	; 0xc20 <__stack+0x321>
 c34:	f6 01       	movw	r30, r12
 c36:	86 81       	ldd	r24, Z+6	; 0x06
 c38:	97 81       	ldd	r25, Z+7	; 0x07
 c3a:	02 c0       	rjmp	.+4      	; 0xc40 <__stack+0x341>
 c3c:	8f ef       	ldi	r24, 0xFF	; 255
 c3e:	9f ef       	ldi	r25, 0xFF	; 255
 c40:	2b 96       	adiw	r28, 0x0b	; 11
 c42:	e2 e1       	ldi	r30, 0x12	; 18
 c44:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__epilogue_restores__>

00000c48 <strnlen_P>:
 c48:	fc 01       	movw	r30, r24
 c4a:	05 90       	lpm	r0, Z+
 c4c:	61 50       	subi	r22, 0x01	; 1
 c4e:	70 40       	sbci	r23, 0x00	; 0
 c50:	01 10       	cpse	r0, r1
 c52:	d8 f7       	brcc	.-10     	; 0xc4a <strnlen_P+0x2>
 c54:	80 95       	com	r24
 c56:	90 95       	com	r25
 c58:	8e 0f       	add	r24, r30
 c5a:	9f 1f       	adc	r25, r31
 c5c:	08 95       	ret

00000c5e <strnlen>:
 c5e:	fc 01       	movw	r30, r24
 c60:	61 50       	subi	r22, 0x01	; 1
 c62:	70 40       	sbci	r23, 0x00	; 0
 c64:	01 90       	ld	r0, Z+
 c66:	01 10       	cpse	r0, r1
 c68:	d8 f7       	brcc	.-10     	; 0xc60 <strnlen+0x2>
 c6a:	80 95       	com	r24
 c6c:	90 95       	com	r25
 c6e:	8e 0f       	add	r24, r30
 c70:	9f 1f       	adc	r25, r31
 c72:	08 95       	ret

00000c74 <fputc>:
 c74:	0f 93       	push	r16
 c76:	1f 93       	push	r17
 c78:	cf 93       	push	r28
 c7a:	df 93       	push	r29
 c7c:	fb 01       	movw	r30, r22
 c7e:	23 81       	ldd	r18, Z+3	; 0x03
 c80:	21 fd       	sbrc	r18, 1
 c82:	03 c0       	rjmp	.+6      	; 0xc8a <fputc+0x16>
 c84:	8f ef       	ldi	r24, 0xFF	; 255
 c86:	9f ef       	ldi	r25, 0xFF	; 255
 c88:	2c c0       	rjmp	.+88     	; 0xce2 <fputc+0x6e>
 c8a:	22 ff       	sbrs	r18, 2
 c8c:	16 c0       	rjmp	.+44     	; 0xcba <fputc+0x46>
 c8e:	46 81       	ldd	r20, Z+6	; 0x06
 c90:	57 81       	ldd	r21, Z+7	; 0x07
 c92:	24 81       	ldd	r18, Z+4	; 0x04
 c94:	35 81       	ldd	r19, Z+5	; 0x05
 c96:	42 17       	cp	r20, r18
 c98:	53 07       	cpc	r21, r19
 c9a:	44 f4       	brge	.+16     	; 0xcac <fputc+0x38>
 c9c:	a0 81       	ld	r26, Z
 c9e:	b1 81       	ldd	r27, Z+1	; 0x01
 ca0:	9d 01       	movw	r18, r26
 ca2:	2f 5f       	subi	r18, 0xFF	; 255
 ca4:	3f 4f       	sbci	r19, 0xFF	; 255
 ca6:	31 83       	std	Z+1, r19	; 0x01
 ca8:	20 83       	st	Z, r18
 caa:	8c 93       	st	X, r24
 cac:	26 81       	ldd	r18, Z+6	; 0x06
 cae:	37 81       	ldd	r19, Z+7	; 0x07
 cb0:	2f 5f       	subi	r18, 0xFF	; 255
 cb2:	3f 4f       	sbci	r19, 0xFF	; 255
 cb4:	37 83       	std	Z+7, r19	; 0x07
 cb6:	26 83       	std	Z+6, r18	; 0x06
 cb8:	14 c0       	rjmp	.+40     	; 0xce2 <fputc+0x6e>
 cba:	8b 01       	movw	r16, r22
 cbc:	ec 01       	movw	r28, r24
 cbe:	fb 01       	movw	r30, r22
 cc0:	00 84       	ldd	r0, Z+8	; 0x08
 cc2:	f1 85       	ldd	r31, Z+9	; 0x09
 cc4:	e0 2d       	mov	r30, r0
 cc6:	09 95       	icall
 cc8:	89 2b       	or	r24, r25
 cca:	e1 f6       	brne	.-72     	; 0xc84 <fputc+0x10>
 ccc:	d8 01       	movw	r26, r16
 cce:	16 96       	adiw	r26, 0x06	; 6
 cd0:	8d 91       	ld	r24, X+
 cd2:	9c 91       	ld	r25, X
 cd4:	17 97       	sbiw	r26, 0x07	; 7
 cd6:	01 96       	adiw	r24, 0x01	; 1
 cd8:	17 96       	adiw	r26, 0x07	; 7
 cda:	9c 93       	st	X, r25
 cdc:	8e 93       	st	-X, r24
 cde:	16 97       	sbiw	r26, 0x06	; 6
 ce0:	ce 01       	movw	r24, r28
 ce2:	df 91       	pop	r29
 ce4:	cf 91       	pop	r28
 ce6:	1f 91       	pop	r17
 ce8:	0f 91       	pop	r16
 cea:	08 95       	ret

00000cec <__ultoa_invert>:
 cec:	fa 01       	movw	r30, r20
 cee:	aa 27       	eor	r26, r26
 cf0:	28 30       	cpi	r18, 0x08	; 8
 cf2:	51 f1       	breq	.+84     	; 0xd48 <__ultoa_invert+0x5c>
 cf4:	20 31       	cpi	r18, 0x10	; 16
 cf6:	81 f1       	breq	.+96     	; 0xd58 <__ultoa_invert+0x6c>
 cf8:	e8 94       	clt
 cfa:	6f 93       	push	r22
 cfc:	6e 7f       	andi	r22, 0xFE	; 254
 cfe:	6e 5f       	subi	r22, 0xFE	; 254
 d00:	7f 4f       	sbci	r23, 0xFF	; 255
 d02:	8f 4f       	sbci	r24, 0xFF	; 255
 d04:	9f 4f       	sbci	r25, 0xFF	; 255
 d06:	af 4f       	sbci	r26, 0xFF	; 255
 d08:	b1 e0       	ldi	r27, 0x01	; 1
 d0a:	3e d0       	rcall	.+124    	; 0xd88 <__ultoa_invert+0x9c>
 d0c:	b4 e0       	ldi	r27, 0x04	; 4
 d0e:	3c d0       	rcall	.+120    	; 0xd88 <__ultoa_invert+0x9c>
 d10:	67 0f       	add	r22, r23
 d12:	78 1f       	adc	r23, r24
 d14:	89 1f       	adc	r24, r25
 d16:	9a 1f       	adc	r25, r26
 d18:	a1 1d       	adc	r26, r1
 d1a:	68 0f       	add	r22, r24
 d1c:	79 1f       	adc	r23, r25
 d1e:	8a 1f       	adc	r24, r26
 d20:	91 1d       	adc	r25, r1
 d22:	a1 1d       	adc	r26, r1
 d24:	6a 0f       	add	r22, r26
 d26:	71 1d       	adc	r23, r1
 d28:	81 1d       	adc	r24, r1
 d2a:	91 1d       	adc	r25, r1
 d2c:	a1 1d       	adc	r26, r1
 d2e:	20 d0       	rcall	.+64     	; 0xd70 <__ultoa_invert+0x84>
 d30:	09 f4       	brne	.+2      	; 0xd34 <__ultoa_invert+0x48>
 d32:	68 94       	set
 d34:	3f 91       	pop	r19
 d36:	2a e0       	ldi	r18, 0x0A	; 10
 d38:	26 9f       	mul	r18, r22
 d3a:	11 24       	eor	r1, r1
 d3c:	30 19       	sub	r19, r0
 d3e:	30 5d       	subi	r19, 0xD0	; 208
 d40:	31 93       	st	Z+, r19
 d42:	de f6       	brtc	.-74     	; 0xcfa <__ultoa_invert+0xe>
 d44:	cf 01       	movw	r24, r30
 d46:	08 95       	ret
 d48:	46 2f       	mov	r20, r22
 d4a:	47 70       	andi	r20, 0x07	; 7
 d4c:	40 5d       	subi	r20, 0xD0	; 208
 d4e:	41 93       	st	Z+, r20
 d50:	b3 e0       	ldi	r27, 0x03	; 3
 d52:	0f d0       	rcall	.+30     	; 0xd72 <__ultoa_invert+0x86>
 d54:	c9 f7       	brne	.-14     	; 0xd48 <__ultoa_invert+0x5c>
 d56:	f6 cf       	rjmp	.-20     	; 0xd44 <__ultoa_invert+0x58>
 d58:	46 2f       	mov	r20, r22
 d5a:	4f 70       	andi	r20, 0x0F	; 15
 d5c:	40 5d       	subi	r20, 0xD0	; 208
 d5e:	4a 33       	cpi	r20, 0x3A	; 58
 d60:	18 f0       	brcs	.+6      	; 0xd68 <__ultoa_invert+0x7c>
 d62:	49 5d       	subi	r20, 0xD9	; 217
 d64:	31 fd       	sbrc	r19, 1
 d66:	40 52       	subi	r20, 0x20	; 32
 d68:	41 93       	st	Z+, r20
 d6a:	02 d0       	rcall	.+4      	; 0xd70 <__ultoa_invert+0x84>
 d6c:	a9 f7       	brne	.-22     	; 0xd58 <__ultoa_invert+0x6c>
 d6e:	ea cf       	rjmp	.-44     	; 0xd44 <__ultoa_invert+0x58>
 d70:	b4 e0       	ldi	r27, 0x04	; 4
 d72:	a6 95       	lsr	r26
 d74:	97 95       	ror	r25
 d76:	87 95       	ror	r24
 d78:	77 95       	ror	r23
 d7a:	67 95       	ror	r22
 d7c:	ba 95       	dec	r27
 d7e:	c9 f7       	brne	.-14     	; 0xd72 <__ultoa_invert+0x86>
 d80:	00 97       	sbiw	r24, 0x00	; 0
 d82:	61 05       	cpc	r22, r1
 d84:	71 05       	cpc	r23, r1
 d86:	08 95       	ret
 d88:	9b 01       	movw	r18, r22
 d8a:	ac 01       	movw	r20, r24
 d8c:	0a 2e       	mov	r0, r26
 d8e:	06 94       	lsr	r0
 d90:	57 95       	ror	r21
 d92:	47 95       	ror	r20
 d94:	37 95       	ror	r19
 d96:	27 95       	ror	r18
 d98:	ba 95       	dec	r27
 d9a:	c9 f7       	brne	.-14     	; 0xd8e <__ultoa_invert+0xa2>
 d9c:	62 0f       	add	r22, r18
 d9e:	73 1f       	adc	r23, r19
 da0:	84 1f       	adc	r24, r20
 da2:	95 1f       	adc	r25, r21
 da4:	a0 1d       	adc	r26, r0
 da6:	08 95       	ret

00000da8 <__prologue_saves__>:
 da8:	2f 92       	push	r2
 daa:	3f 92       	push	r3
 dac:	4f 92       	push	r4
 dae:	5f 92       	push	r5
 db0:	6f 92       	push	r6
 db2:	7f 92       	push	r7
 db4:	8f 92       	push	r8
 db6:	9f 92       	push	r9
 db8:	af 92       	push	r10
 dba:	bf 92       	push	r11
 dbc:	cf 92       	push	r12
 dbe:	df 92       	push	r13
 dc0:	ef 92       	push	r14
 dc2:	ff 92       	push	r15
 dc4:	0f 93       	push	r16
 dc6:	1f 93       	push	r17
 dc8:	cf 93       	push	r28
 dca:	df 93       	push	r29
 dcc:	cd b7       	in	r28, 0x3d	; 61
 dce:	de b7       	in	r29, 0x3e	; 62
 dd0:	ca 1b       	sub	r28, r26
 dd2:	db 0b       	sbc	r29, r27
 dd4:	0f b6       	in	r0, 0x3f	; 63
 dd6:	f8 94       	cli
 dd8:	de bf       	out	0x3e, r29	; 62
 dda:	0f be       	out	0x3f, r0	; 63
 ddc:	cd bf       	out	0x3d, r28	; 61
 dde:	09 94       	ijmp

00000de0 <__epilogue_restores__>:
 de0:	2a 88       	ldd	r2, Y+18	; 0x12
 de2:	39 88       	ldd	r3, Y+17	; 0x11
 de4:	48 88       	ldd	r4, Y+16	; 0x10
 de6:	5f 84       	ldd	r5, Y+15	; 0x0f
 de8:	6e 84       	ldd	r6, Y+14	; 0x0e
 dea:	7d 84       	ldd	r7, Y+13	; 0x0d
 dec:	8c 84       	ldd	r8, Y+12	; 0x0c
 dee:	9b 84       	ldd	r9, Y+11	; 0x0b
 df0:	aa 84       	ldd	r10, Y+10	; 0x0a
 df2:	b9 84       	ldd	r11, Y+9	; 0x09
 df4:	c8 84       	ldd	r12, Y+8	; 0x08
 df6:	df 80       	ldd	r13, Y+7	; 0x07
 df8:	ee 80       	ldd	r14, Y+6	; 0x06
 dfa:	fd 80       	ldd	r15, Y+5	; 0x05
 dfc:	0c 81       	ldd	r16, Y+4	; 0x04
 dfe:	1b 81       	ldd	r17, Y+3	; 0x03
 e00:	aa 81       	ldd	r26, Y+2	; 0x02
 e02:	b9 81       	ldd	r27, Y+1	; 0x01
 e04:	ce 0f       	add	r28, r30
 e06:	d1 1d       	adc	r29, r1
 e08:	0f b6       	in	r0, 0x3f	; 63
 e0a:	f8 94       	cli
 e0c:	de bf       	out	0x3e, r29	; 62
 e0e:	0f be       	out	0x3f, r0	; 63
 e10:	cd bf       	out	0x3d, r28	; 61
 e12:	ed 01       	movw	r28, r26
 e14:	08 95       	ret

00000e16 <_exit>:
 e16:	f8 94       	cli

00000e18 <__stop_program>:
 e18:	ff cf       	rjmp	.-2      	; 0xe18 <__stop_program>
